{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welkom Welkom bij de helppagina's waarin de Geonovum Werkwijze beschreven is. Dit is niet een formele beschrijving van de werkwijze maar maar meer een hulpmiddel om stap voor stap de tooling uit te leggen. Om de standaarden die in beheer zijn bij Geonovum te kunnen beheren, wordt gebruik gemaakt van verschillende tooling. Documenten die behoren bij de standaarden worden gepubliceerd op https://docs.geostandaarden.nl als HTML bestanden, deze HTML bestanden worden aangemaakt met een tool van W3C: ReSpec. ReSpec maakt gebruik van input bestanden om de HTML te genereren. Deze inputbestanden (de content) wordt gemaakt in een formaat: Markdown. Deze Markdown bestanden kunnen worden aangemaakt met text editor zoals Visual Studio van Microsoft of Notepad++. Visual Studio heeft het voordeel dat de editor mooi integreert met de Github Desktop Client. GitHub tenslotte wordt gebruikt als de \u201crepository\u201d, waarin alle bestanden die bij een standaard horen, komen te staan. Deze handleiding beschrijft hoe je een GitHub Account maakt, hoe je GitHub Desktop Client installeert en gebruikt, hoe je een Respec mappenstructuur opbouwt, welke bestanden er nodig zijn voor een standaard, en hoe je de verschillende versies van een standaard genereert. Ook wordt uitgelegd hoe je de Markdown plugin in Microsoft Word installeert en gebruikt. Binnen Geonovum maken we gebruik van de volgende tools: GitHub GitHub handleiding : Beschrijft hoe je een account aanmaakt en je beheertaken uitvoert. GitHub werkwijze : Meer algemene inleiding over GitHub. ReSpec Respec handleiding : Algemene handleiding. Respec checklist : Checklist van handeling bij het publiceren van een standaard middels ReSpec. Markdown Markdown handleiding Subversion Subversion instructies Imvertor Imvertor GML GML Enterprise Architect Primitieve datatypes Uitleg MkDocs MkDocs is een lichtgewicht tool die een collectie Markdown documenten omzet in een navigeerbare handleiding. Omdat we er bij Geonovum nog niet uit zijn hoe we documentatie gaan behren is MkDocs een eenvoudige manier om de bestaande documentatie te ontsluiten. In de menubalk aan de bovenkant zie je de verschillende onderwerpen die in deze documentatie behandeld worden. Van sommige van die onderwerpen zijn nog subonderwerpen beschreven. Kies een onderwerp en in de linkermenubalk verschijnt een hoofdstukindeling. Ook is er zoekfunctie. Bijhouden Deze handleiding is als HTML gepubliceerd op: de GitHub paginas van Geonovum. Om deze up to date te houden kun je in een linux omgeving in de root folder van het repository het commando mkdocs gh-deploy hiervoor heb je wel een github token nodig en de juiste packages. TODO: Hier een GitHub action van maken","title":"Welkom"},{"location":"#welkom","text":"Welkom bij de helppagina's waarin de Geonovum Werkwijze beschreven is. Dit is niet een formele beschrijving van de werkwijze maar maar meer een hulpmiddel om stap voor stap de tooling uit te leggen. Om de standaarden die in beheer zijn bij Geonovum te kunnen beheren, wordt gebruik gemaakt van verschillende tooling. Documenten die behoren bij de standaarden worden gepubliceerd op https://docs.geostandaarden.nl als HTML bestanden, deze HTML bestanden worden aangemaakt met een tool van W3C: ReSpec. ReSpec maakt gebruik van input bestanden om de HTML te genereren. Deze inputbestanden (de content) wordt gemaakt in een formaat: Markdown. Deze Markdown bestanden kunnen worden aangemaakt met text editor zoals Visual Studio van Microsoft of Notepad++. Visual Studio heeft het voordeel dat de editor mooi integreert met de Github Desktop Client. GitHub tenslotte wordt gebruikt als de \u201crepository\u201d, waarin alle bestanden die bij een standaard horen, komen te staan. Deze handleiding beschrijft hoe je een GitHub Account maakt, hoe je GitHub Desktop Client installeert en gebruikt, hoe je een Respec mappenstructuur opbouwt, welke bestanden er nodig zijn voor een standaard, en hoe je de verschillende versies van een standaard genereert. Ook wordt uitgelegd hoe je de Markdown plugin in Microsoft Word installeert en gebruikt. Binnen Geonovum maken we gebruik van de volgende tools:","title":"Welkom"},{"location":"#github","text":"GitHub handleiding : Beschrijft hoe je een account aanmaakt en je beheertaken uitvoert. GitHub werkwijze : Meer algemene inleiding over GitHub.","title":"GitHub"},{"location":"#respec","text":"Respec handleiding : Algemene handleiding. Respec checklist : Checklist van handeling bij het publiceren van een standaard middels ReSpec.","title":"ReSpec"},{"location":"#markdown","text":"Markdown handleiding","title":"Markdown"},{"location":"#subversion","text":"Subversion instructies","title":"Subversion"},{"location":"#imvertor","text":"Imvertor","title":"Imvertor"},{"location":"#gml","text":"GML","title":"GML"},{"location":"#enterprise-architect","text":"Primitieve datatypes","title":"Enterprise Architect"},{"location":"#uitleg-mkdocs","text":"MkDocs is een lichtgewicht tool die een collectie Markdown documenten omzet in een navigeerbare handleiding. Omdat we er bij Geonovum nog niet uit zijn hoe we documentatie gaan behren is MkDocs een eenvoudige manier om de bestaande documentatie te ontsluiten. In de menubalk aan de bovenkant zie je de verschillende onderwerpen die in deze documentatie behandeld worden. Van sommige van die onderwerpen zijn nog subonderwerpen beschreven. Kies een onderwerp en in de linkermenubalk verschijnt een hoofdstukindeling. Ook is er zoekfunctie.","title":"Uitleg MkDocs"},{"location":"#bijhouden","text":"Deze handleiding is als HTML gepubliceerd op: de GitHub paginas van Geonovum. Om deze up to date te houden kun je in een linux omgeving in de root folder van het repository het commando mkdocs gh-deploy hiervoor heb je wel een github token nodig en de juiste packages. TODO: Hier een GitHub action van maken","title":"Bijhouden"},{"location":"GML/","text":"GML en XSD Een algemene handleiding voor het opslaag van Geometrie in GML bestanden is te vinden in: Geometrie in model en GML XSD en Namespaces Bij een XML applicatie schema (dus ook voor GML schema's) wordt vaak een namespace gebruikt. Deze namespace hoort vaak bij een domein en het is de bedoel dat de combinatie van de namespace en het element uniek is. Dit kan alleen als de namespace, die de vorm van een URI heeft uniek is. Door een URI te kiezen die bij jou onder beheer is weet je zeker dat de combinatie uniek is. In de volgende paragraaf zie je een lijste gebruikte namespaces. Hieronder wat richtlijnen. Voor de basis wordt: http://www.geostandaarden.nl gebruikt. Het is nog even de vraag of we niet op https moeten overstappen. Dat doen we niet want niemand anders doet deze overstap. Daarna volgt een identificatie van de standaard. Een versienummer volgens semver X.Y. Een Z-versie is niet nodig omdat alle Z-versies backwards compatible zijn en je dus nooit meer dan 1 versie gebruikt. De volgende model onderdelen wordt gebruikt bij het maken construeren van schemas: Een schema heeft een [X.Y.Z] versienummer Een schema hoort bij een standaard met een [standaard] Een schema heeft een onderdeel [onderdeel] Samen wordt dit: namespace van schema: http://www.geostandaarden.nl/[standaard]/[onderdeel]/x.y locatie van schema: https://register.geostanadaarden.nl/xmlschema/[standaard]/[x.y.z]/[onderdeel].xsd vesion in het schema: [x.y.z] Bij een standaard zonder onderdelen wordt de bestandsnaam als onderdeelnaam gebruikt bij locatie. Namespaces in door Geonovum beheerde schema's GML applicatieschema's zijn te vinden op: https://register.geostandaarden.nl/gmlapplicatieschema/ Een korte inventarisatie levert: standaard versie namespace basisgeometrie 1.0.0 http://www.geostandaarden.nl/basisgeometrie/1.0 basisgeometrie v20190901 http://www.geostandaarden.nl/basisgeometrie/v20190901 brt-algemeen 1.2.0 http://register.geostandaarden.nl/gmlapplicatieschema/brt-algemeen/1.2.0 imaer 5.1.1 http://imaer.aerius.nl/5.1 img 3.0.0 http://www.geluidgegevens.nl/IMGeluid/3.0 imgeo (simple) 2.1.1 http://www.geostandaarden.nl/imgeo/2.1/simple/gml31 imgeo 2.1.1 http://www.geostandaarden.nl/imgeo/2.1 imkl (wibon) 2.0.0 http://www.geostandaarden.nl/imkl/wibon imkl (wibonbr) 2.0.0 http://www.geostandaarden.nl/imkl/wibonbr imkl2015 (wionbr) 1.2 http://www.geostandaarden.nl/imkl/2015/wionbr/1.2 imkl2015 (wionbr) 1.2.1 http://www.geostandaarden.nl/imkl/2015/wionbr/1.2 top10nl 1.1.1 http://www.kadaster.nl/schemas/top10nl/v20120116 top10nl 1.2.0 http://register.geostandaarden.nl/gmlapplicatieschema/top10nl/1.2.0","title":"GML"},{"location":"GML/#gml-en-xsd","text":"Een algemene handleiding voor het opslaag van Geometrie in GML bestanden is te vinden in: Geometrie in model en GML","title":"GML en XSD"},{"location":"GML/#xsd-en-namespaces","text":"Bij een XML applicatie schema (dus ook voor GML schema's) wordt vaak een namespace gebruikt. Deze namespace hoort vaak bij een domein en het is de bedoel dat de combinatie van de namespace en het element uniek is. Dit kan alleen als de namespace, die de vorm van een URI heeft uniek is. Door een URI te kiezen die bij jou onder beheer is weet je zeker dat de combinatie uniek is. In de volgende paragraaf zie je een lijste gebruikte namespaces. Hieronder wat richtlijnen. Voor de basis wordt: http://www.geostandaarden.nl gebruikt. Het is nog even de vraag of we niet op https moeten overstappen. Dat doen we niet want niemand anders doet deze overstap. Daarna volgt een identificatie van de standaard. Een versienummer volgens semver X.Y. Een Z-versie is niet nodig omdat alle Z-versies backwards compatible zijn en je dus nooit meer dan 1 versie gebruikt. De volgende model onderdelen wordt gebruikt bij het maken construeren van schemas: Een schema heeft een [X.Y.Z] versienummer Een schema hoort bij een standaard met een [standaard] Een schema heeft een onderdeel [onderdeel] Samen wordt dit: namespace van schema: http://www.geostandaarden.nl/[standaard]/[onderdeel]/x.y locatie van schema: https://register.geostanadaarden.nl/xmlschema/[standaard]/[x.y.z]/[onderdeel].xsd vesion in het schema: [x.y.z] Bij een standaard zonder onderdelen wordt de bestandsnaam als onderdeelnaam gebruikt bij locatie.","title":"XSD en Namespaces"},{"location":"GML/#namespaces-in-door-geonovum-beheerde-schemas","text":"GML applicatieschema's zijn te vinden op: https://register.geostandaarden.nl/gmlapplicatieschema/ Een korte inventarisatie levert: standaard versie namespace basisgeometrie 1.0.0 http://www.geostandaarden.nl/basisgeometrie/1.0 basisgeometrie v20190901 http://www.geostandaarden.nl/basisgeometrie/v20190901 brt-algemeen 1.2.0 http://register.geostandaarden.nl/gmlapplicatieschema/brt-algemeen/1.2.0 imaer 5.1.1 http://imaer.aerius.nl/5.1 img 3.0.0 http://www.geluidgegevens.nl/IMGeluid/3.0 imgeo (simple) 2.1.1 http://www.geostandaarden.nl/imgeo/2.1/simple/gml31 imgeo 2.1.1 http://www.geostandaarden.nl/imgeo/2.1 imkl (wibon) 2.0.0 http://www.geostandaarden.nl/imkl/wibon imkl (wibonbr) 2.0.0 http://www.geostandaarden.nl/imkl/wibonbr imkl2015 (wionbr) 1.2 http://www.geostandaarden.nl/imkl/2015/wionbr/1.2 imkl2015 (wionbr) 1.2.1 http://www.geostandaarden.nl/imkl/2015/wionbr/1.2 top10nl 1.1.1 http://www.kadaster.nl/schemas/top10nl/v20120116 top10nl 1.2.0 http://register.geostandaarden.nl/gmlapplicatieschema/top10nl/1.2.0","title":"Namespaces in door Geonovum beheerde schema's"},{"location":"GitHub-Inleiding/","text":"Inleiding Github Bij Geonovum worden documenten (standaarden, onderzoeken, rapporten, enz) web-based gepubliceerd. Ook worden de documenten vaak in een werkgroep gemaakt, waarbij ieder werkgroeplid meeschrijft aan het document. Om dit te kunnen gebruiken we een aantal tools: GitHub, Respec en Markdown. Deze introductie gaat over Github. Waarschijnlijk wil je weten wat GitHub is, anders was je nu niet deze handleiding aan het lezen. Je gaat hier meer over GitHub lezen en waarom het handig is. Er zijn een aantal GitHub termen die alvast handig zijn om te weten. Tot slot lees je hoe je zelf aan de slag kan gaan met GitHub. Meer over Github Veel programmeurs wereldwijd maken gebruik van de website GitHub. Zelf zal je er misschien ook wel van gehoord hebben. Als programmeur is het handig om te weten wat GitHub is en hoe je er gebruik van maakt. GitHub bestaat uit twee woorden, namelijk Git + Hub. Laten we beginnen met Git. *Git is een open source versiebeheersysteem. De website GitHub is gemaakt op basis van het versiebeheersysteem Git. Met GitHub heb je alle mogelijkheden van Git + extra features. Volgens veel programmeurs is Git momenteel het beste versiebeheersysteem, daarom is GitHub ook zo populair. In een versiebeheersysteem kunnen programmeurs projecten beheren met code. Het is mogelijk om verschillende versies te beheren en eventueel terug te vallen op een oude versie, mocht er iets misgaan. Stel dat je met een team een app wilt programmeren. Dan is het handig als iedereen bij het project kan met daarin alle code van de app. Ook is het handig dat iedereen de laatste code wijzigingen ziet van teamleden en daar eventueel op kan reageren en/of het aanpassen. Maar waar staat \u201cHub\u201d voor in GitHub? Met \u201cHub\u201d wordt eigenlijk het centrale deel bedoeld, waar alle projecten samenkomen die beheerd worden met Git. De website GitHub is de centrale plek waar programmeurs hun projecten beheren met Git. Bij Geonovum gebruiken we Github op een andere manier. Namelijk voor het voor werken aan documentatie voor geostandaarden. Per project is een repository aangemaakt. Een Repository is eenvoudig gezegd een werkmap/projectomgeving. Welke andere mogelijkheden heeft Github? Je weet nu dat het mogelijk is om in een team projecten (Waarin code staat) te beheren op GitHub. Het is natuurlijk ook mogelijk om je eigen projecten op GitHub te beheren. Zo heb je een goed overzicht van de aanpassingen en verschillende versies. Daarnaast staat je project online. Als je een belangrijk project bijvoorbeeld alleen lokaal op je eigen computer opslaat en je computer houdt ermee op, dan ben je zwaar de pineut. Op GitHub kan je er gewoon altijd bij. Maar welke mogelijkheden heeft GitHub nog meer? Hier staan een aantal belangrijke mogelijkheden op een rijtje: Een project maken gebaseerd op een project dat al bestaat Discussie starten over een project Code reviewen Aparte branches maken, waarin je bijvoorbeeld code aanpassingen doet om te testen, die niet gelijk in de \u201cproductieversie\u201d komen Code van branch samenvoegen met andere branch Tags meegeven aan verschillende versies, zoals V1.0 en V2.0 Kwetsbaarheden in de code makkelijker ontdekken, GitHub stuurt ook een mail als het kwetsbaarheden ontdekt Een website hosten Waarom is Github handig? GitHub zorgt ervoor dat een individueel of een project in teamverband erg overzichtelijk is. Je hebt een goed overzicht van de laatste aanpassingen en welke persoon dat heeft gedaan. Je kan eenvoudig meerdere versies maken en eenvoudig terugvallen op een vorige versie, mocht het misgaan. Door de verschillende branches loop je geen enkel risico bij het aanpassen en testen van nieuwe code. Meer over branches in \u201cBetekenissen van GitHub termen\u201d . Voor programmeurs maakt GitHub het werken een stuk makkelijker en leuker. Stel dat je als programmeur niet aan versiebeheer zou doen of dat zou doen met een slecht versiebeheersysteem, dan ga je vroeg of laat in de problemen komen. GitHub is een centrale plek waar heel veel programmeurs en teams hun projecten beheren. Veel projecten zijn open source en kunnen door iedereen worden ingezien en aangepast. Het is erg leerzaam om naar projecten van anderen te kijken. Als je wat meer ervaring hebt, kan je misschien wel verbeteringen voorstellen en meedoen aan gave projecten! Met GitHub gaat er als programmeur een wereld voor je open. Het is goed om projecten te beheren en je kan er ook heel veel leren. Betekenis van Github termen? Op GitHub zijn er een aantal termen die handig zijn om alvast te weten. Als je meer gebruik gaat maken van GitHub, dan leer je de betekenis van deze termen vanzelf kennen. Hieronder staan belangrijke GitHub termen en de betekenis ervan: GitHub term Betekenis Repository Een repository kan je zien als de hoofdmap van je project. Hierin staan alle bestanden van je project en de historie van wijzigingen die je hebt gedaan. Branch Aparte plek binnen je repository, waar je bijvoorbeeld nieuwe code kan testen, zonder dat te hoeven doen op de \u201cproductversie\u201d. Master Dit is de hoofdbranch, oftewel de \u201cproductversie\u201d van je project. Nieuwe code die is getest en goedgekeurd, wordt samengevoegd met de Master branch. Fork Een fork is een kopie van een repository. Hierdoor kan je werken aan een project van iemand anders, zonder het origineel aan te passen. Commit Git commando dat veranderingen toevoegt aan je lokale repository. Push Git commando om aanpassingen naar je (remote) repository te sturen, die staat op GitHub. Pull Git commando om aanpassingen van je (remote) repository naar je lokale bestanden te sturen. Merge Git commando om aanpassingen van een branch samen te voegen met een andere branch. Bijvoorbeeld aanpassingen die getest en goedgekeurd zijn in de \u201cDevelop\u201d branch samenvoegen met de \u201cMaster\u201d branch. Checkout Deze Git commando wordt vaak gebruikt om te switchen tussen branches. Je checkt als het ware uit bij een branch en gaat aan de slag in een andere branch. Zelf aan de slag met Github Hopelijk heb je een beter beeld over wat GitHub is. Ben je een gebruiker of wil je programmeur worden en werk je nog niet met een (goed) versiebeheersysteem? Dan is het zeker aan te raden om te beginnen met GitHub. Als je een account hebt aangemaakt kun je zelf een repository aanmaken. Zie hiervoor: Aanmaken GitHub Account Stuur een mail naar account@geonovum.nl om toegevoegd te worden aan deze repository. Je moet dan wel eerst een account aangemaakt hebben op github","title":"GitHub Intro"},{"location":"GitHub-Inleiding/#inleiding-github","text":"Bij Geonovum worden documenten (standaarden, onderzoeken, rapporten, enz) web-based gepubliceerd. Ook worden de documenten vaak in een werkgroep gemaakt, waarbij ieder werkgroeplid meeschrijft aan het document. Om dit te kunnen gebruiken we een aantal tools: GitHub, Respec en Markdown. Deze introductie gaat over Github. Waarschijnlijk wil je weten wat GitHub is, anders was je nu niet deze handleiding aan het lezen. Je gaat hier meer over GitHub lezen en waarom het handig is. Er zijn een aantal GitHub termen die alvast handig zijn om te weten. Tot slot lees je hoe je zelf aan de slag kan gaan met GitHub.","title":"Inleiding Github"},{"location":"GitHub-Inleiding/#meer-over-github","text":"Veel programmeurs wereldwijd maken gebruik van de website GitHub. Zelf zal je er misschien ook wel van gehoord hebben. Als programmeur is het handig om te weten wat GitHub is en hoe je er gebruik van maakt. GitHub bestaat uit twee woorden, namelijk Git + Hub. Laten we beginnen met Git. *Git is een open source versiebeheersysteem. De website GitHub is gemaakt op basis van het versiebeheersysteem Git. Met GitHub heb je alle mogelijkheden van Git + extra features. Volgens veel programmeurs is Git momenteel het beste versiebeheersysteem, daarom is GitHub ook zo populair. In een versiebeheersysteem kunnen programmeurs projecten beheren met code. Het is mogelijk om verschillende versies te beheren en eventueel terug te vallen op een oude versie, mocht er iets misgaan. Stel dat je met een team een app wilt programmeren. Dan is het handig als iedereen bij het project kan met daarin alle code van de app. Ook is het handig dat iedereen de laatste code wijzigingen ziet van teamleden en daar eventueel op kan reageren en/of het aanpassen. Maar waar staat \u201cHub\u201d voor in GitHub? Met \u201cHub\u201d wordt eigenlijk het centrale deel bedoeld, waar alle projecten samenkomen die beheerd worden met Git. De website GitHub is de centrale plek waar programmeurs hun projecten beheren met Git. Bij Geonovum gebruiken we Github op een andere manier. Namelijk voor het voor werken aan documentatie voor geostandaarden. Per project is een repository aangemaakt. Een Repository is eenvoudig gezegd een werkmap/projectomgeving.","title":"Meer over Github"},{"location":"GitHub-Inleiding/#welke-andere-mogelijkheden-heeft-github","text":"Je weet nu dat het mogelijk is om in een team projecten (Waarin code staat) te beheren op GitHub. Het is natuurlijk ook mogelijk om je eigen projecten op GitHub te beheren. Zo heb je een goed overzicht van de aanpassingen en verschillende versies. Daarnaast staat je project online. Als je een belangrijk project bijvoorbeeld alleen lokaal op je eigen computer opslaat en je computer houdt ermee op, dan ben je zwaar de pineut. Op GitHub kan je er gewoon altijd bij. Maar welke mogelijkheden heeft GitHub nog meer? Hier staan een aantal belangrijke mogelijkheden op een rijtje: Een project maken gebaseerd op een project dat al bestaat Discussie starten over een project Code reviewen Aparte branches maken, waarin je bijvoorbeeld code aanpassingen doet om te testen, die niet gelijk in de \u201cproductieversie\u201d komen Code van branch samenvoegen met andere branch Tags meegeven aan verschillende versies, zoals V1.0 en V2.0 Kwetsbaarheden in de code makkelijker ontdekken, GitHub stuurt ook een mail als het kwetsbaarheden ontdekt Een website hosten","title":"Welke andere mogelijkheden heeft Github?"},{"location":"GitHub-Inleiding/#waarom-is-github-handig","text":"GitHub zorgt ervoor dat een individueel of een project in teamverband erg overzichtelijk is. Je hebt een goed overzicht van de laatste aanpassingen en welke persoon dat heeft gedaan. Je kan eenvoudig meerdere versies maken en eenvoudig terugvallen op een vorige versie, mocht het misgaan. Door de verschillende branches loop je geen enkel risico bij het aanpassen en testen van nieuwe code. Meer over branches in \u201cBetekenissen van GitHub termen\u201d . Voor programmeurs maakt GitHub het werken een stuk makkelijker en leuker. Stel dat je als programmeur niet aan versiebeheer zou doen of dat zou doen met een slecht versiebeheersysteem, dan ga je vroeg of laat in de problemen komen. GitHub is een centrale plek waar heel veel programmeurs en teams hun projecten beheren. Veel projecten zijn open source en kunnen door iedereen worden ingezien en aangepast. Het is erg leerzaam om naar projecten van anderen te kijken. Als je wat meer ervaring hebt, kan je misschien wel verbeteringen voorstellen en meedoen aan gave projecten! Met GitHub gaat er als programmeur een wereld voor je open. Het is goed om projecten te beheren en je kan er ook heel veel leren. Betekenis van Github termen? Op GitHub zijn er een aantal termen die handig zijn om alvast te weten. Als je meer gebruik gaat maken van GitHub, dan leer je de betekenis van deze termen vanzelf kennen. Hieronder staan belangrijke GitHub termen en de betekenis ervan: GitHub term Betekenis Repository Een repository kan je zien als de hoofdmap van je project. Hierin staan alle bestanden van je project en de historie van wijzigingen die je hebt gedaan. Branch Aparte plek binnen je repository, waar je bijvoorbeeld nieuwe code kan testen, zonder dat te hoeven doen op de \u201cproductversie\u201d. Master Dit is de hoofdbranch, oftewel de \u201cproductversie\u201d van je project. Nieuwe code die is getest en goedgekeurd, wordt samengevoegd met de Master branch. Fork Een fork is een kopie van een repository. Hierdoor kan je werken aan een project van iemand anders, zonder het origineel aan te passen. Commit Git commando dat veranderingen toevoegt aan je lokale repository. Push Git commando om aanpassingen naar je (remote) repository te sturen, die staat op GitHub. Pull Git commando om aanpassingen van je (remote) repository naar je lokale bestanden te sturen. Merge Git commando om aanpassingen van een branch samen te voegen met een andere branch. Bijvoorbeeld aanpassingen die getest en goedgekeurd zijn in de \u201cDevelop\u201d branch samenvoegen met de \u201cMaster\u201d branch. Checkout Deze Git commando wordt vaak gebruikt om te switchen tussen branches. Je checkt als het ware uit bij een branch en gaat aan de slag in een andere branch.","title":"Waarom is Github handig?"},{"location":"GitHub-Inleiding/#zelf-aan-de-slag-met-github","text":"Hopelijk heb je een beter beeld over wat GitHub is. Ben je een gebruiker of wil je programmeur worden en werk je nog niet met een (goed) versiebeheersysteem? Dan is het zeker aan te raden om te beginnen met GitHub. Als je een account hebt aangemaakt kun je zelf een repository aanmaken. Zie hiervoor: Aanmaken GitHub Account Stuur een mail naar account@geonovum.nl om toegevoegd te worden aan deze repository. Je moet dan wel eerst een account aangemaakt hebben op github","title":"Zelf aan de slag met Github"},{"location":"GitHub/","text":"GitHub In dit hoofdstuk komen zowel GitHub als GitHub desktop client aan de orde. Geonovum heeft op github een eigen \u2018onderkomen\u2019 op: https://github.com/Geonovum . In dit hoofdstuk staat beschreven wat je moet doen om \u201cup-and-running\u201d te komen voor het uitvoeren van je beheertaken op GitHub. Hoe je een account aanmaakt, en hoe je de benodigde software installeert. Installatie en inrichting Aanmaken GitHub account Als je nog geen GitHub account hebt, of als je een apart GitHub account wil maken voor je Geonovum werkzaamheden, ga naar: https://github.com/join/get-started . Dan zie je het scherm dat hiernaast staat. Maak in dat scherm een usernaam aan waarmee je op GitHub gaat werken. Tip : als je met meerdere accounts gaat werken, zorg er dan voor dat aan de accountnaam kan zien waarvoor die dan gebruikt moet worden. (Bijvoorbeeld door die naam te eindigen op \u2013GNM). Verplicht is dit niet. Vul in het veld username je nieuwe GitHub naam in. Vul in het veld email adress je geonovum mailadres in Klik vervolgens op \u201cCreate Account\u201d en dan wordt je account aangemaakt. Kies in dit scherm je persoonlijke plan. Bij Geonovum gebruiken we de gratis versie, dus selecteer die. Installeren GitHub desktop Ga in je internet browser naar https://desktop.github.com/ Klik daar op download for Windows (64bit). Nu wordt de installer gedownload, en dat zie je linksonder in je browser zoals in het plaatje rechts: Na starten van de installer verschijnt het scherm hiernaast Het volgende scherm zal nu openen Het aanmaken van een account hoeven we niet meer te doen, want dat hebben we in de vorige stap al gedaan. Dus klik op Sign Into Github.com Na Klikken op Sign into Github.com, verschijnt dit scherm. Hier hoeft verder niks ingevuld te worden, dus klik op continue. In dit scherm kan je desgewenst het vinkje bij het versturen van anonieme data uitzetten. Daarna klikken op Finish. GitHub Desktop is nu ge\u00efnstalleerd. Opties voor GitHub desktop GitHub Desktop kan worden aangepast aan persoonlijke voorkeuren. Dat doe je door in het hoofdscherm van de GitHub Desktop op het menu \u201cFile\u201d te klikken en vervolgens voor \u201cOpties\u201d te kiezen. In het Accounts scherm staat hoe je bent ingelogd bij GitHub. Hier kan je uitloggen en opnieuw inloggen als je meerdere GitHub Accounts hebt. In het tabblad \u201cGit\u201d kan je je Github Naam eventueel aanpassen. De GitHub Email is de email die intern binnen Github wordt gebruikt. Die hoeft niet gewijzigd te worden. In het tabblad \u201cAppearance\u201d kan je ervoor kiezen om in Light of Dark modus te werken. Hiermee verander je alleen de achtergrondkleur van de GitHub Desktop omgeving. In dit scherm kan je de voorkeurs editor instellen. Default wordt gekeken naar de reeds aanwezige tekst editors. Omdat GitHub van nature een samenwerkomgeving is voor het ontwikkelen van programmatuur, gaat het hier om \u201cplatte tekst\u201d editors. Werkwijze Geonovum De Geonovum GitHub pagina Geonovum heeft een eigen GitHub Bedrijfspagina: https://github.com/Geonovum . Voor alle projecten die een product maken of beheren wordt een repository aangemaakt. Het aanmaken van een repository staat beschreven in paragraaf 2.3.1 . Mappenstructuur in de respository In de Repository maak je indien nodig submappen aan. Submappen zijn handig als er in je Repository meer dan \u00e9\u00e9n ReSpec document komt te staan. Over ReSpec meer in hoofdstuk 3. Hiernaast een afbeelding van de GitHub Repository voor MIM. Twee mappen omdat MIM twee documenten bevat. Ook maakt GitHub standaard een readme.md aan. De readme staat in het \u201cMarkdown\u201d formaat, waarover in de volgende paragraaf meer. Readme.md In de readme.md file staat nog eens beschreven Wat de inhoud van de Repository is. Neem ook de link naar de webversie van de documenten hier op, dan is het voor bezoekers gemakkelijker om het document te openen in een browser. Neem altijd een link naar https://docs.geostandaarden.nl/ op, en in het geval het technische documenten betreft zoals UML\u2019s, XSD\u2019s, GML\u2019s, XML\u2019s een link naar http://register.geostandaarden.nl/ in het Readme bestand op. Aan de slag met GitHub In deze paragraaf een beschrijving van hoe je in GitHub een nieuwe repository aanmaakt, en hoe je die synchroniseert met je lokale GitHub client. Het maken van een nieuwe repository Een nieuwe repository maak je aan in de Centrale GitHub omgeving. Klik in de banner bovenaan de pagina, naast je profielfoto op \u201c+\u201d en kies \u201cCreate Repository\u201d Nadat je op \u201c+\u201d hebt geklikt, verschijnt het scherm hieronder. Vul hier de naam van de repository in. Deze naam moet uniek zijn binnen de Geonovum omgeving, en voor MIM is dat geworden: MIM-Werkomgeving Denk goed na over de naam, en houd het kort en bondig, immers deze naam wordt onderdeel van de URL van de Repository Vul ook de beschrijving in van het project. Belangrijk is dat je lokaal dus op je werkplek de mappen ook logisch inricht. Maak dus eerst lokaal een map aan waarin je je lokale Repository neerzet. Het is slim om alle lokale Repositories onder een mapje \u201cGitHub\u201d neer te zetten. Geef als local path de naam van de GitHub map op. GitHub zal dan de naam van de standaard als mapnaam aanmaken onder de lokale GitHub map. Het is wel zo netjes om een readme file aan te maken, hierin zet je een korte omschrijving van de repository. Vinkje aanzetten dus. Klik vervolgens op \u201cCreate Repository\u201d GitHub Clone: eerste keer ophalen van de centrale repository Start de GitHub Client, en kies in het menu File voor Clone Repository. En kies de Repository die je wil clonen (in dit geval Geonovum/MIM). Als Local Path kies je een logische plek op je PC/Laptop. (Tip: het is handig om \u00e9\u00e9n plek voor je Github Repositories te maken, bijvoorbeeld C:. Na het aanklikken van de knop clone wordt een lokale kopie gemaakt. Github weet welke versie je hebt opgehaald, en zal de wijzingen die je maakt netjes voor je bijhouden. In de map die je als local path hebt opgegeven komt de mappen structuur te staan zoals hierboven beschreven. GitHub Pull origin: ophalen van wijzigingen Een pull commando werkt de lokale versie van je GitHub Repository bij. Wijzigingen die zijn gedaan in de centrale repository (dus op Github.com) worden ook doorgevoerd in je lokale kopie. Het uitvoeren van een pull doe je door in het menu Repository op pull te klikken. NB: Voer dit commando regelmatig uit als er meerdere mensen in de repository werken, om conflicterende wijzigingen te voorkomen. GitHub Commit to Master: wijzigingen opslaan Met de knop Commit to master zet je de wijzigingen die je hebt gedaan klaar om te uploaden naar de Centrale GitHub Repository. GitHub maakt daartoe een versie aan, die je verplicht voorziet van een summary en optioneel van een Description Let op: met het committen heb je dus nog niks ge-upload. GitHub Push origin of Pull request: wijzigingen uploaden Nadat je de wijzigingen hebt gecommit, moeten ze richting de centrale repository. Nu zijn er twee mogelijkheden. Ofwel je hebt schrijfrechten op de Centrale Repository, of je hebt ze niet. In het eerste geval kan je een Push Origin uitvoeren, dan worden de wijzigingen meteen in de Centrale GitHub Repository verwerkt. In het tweede geval doe je een Pull request bij de eigenaar van de Repository om de wijzigingen door te voeren. Github maakt dan een eigen versie voor je aan (dat heet een fork) en vraagt aan de eigenaar van de Repository om die fork te verwerken in de Centrale Repository. Enkele regels over GitHub binnen Geonovum Geonovum heeft binnen github een team: https://github.com/Geonovum. Github beheer Github teamleden met beheerders rechten zijn te vinden via: https://github.com/orgs/Geonovum/people?query=role%3Aowner Daarnaast zijn er nog drie inhoudelijk beheerders vanuit Geonovum: Arnoud de Boer, Frank Terpstra en Linda vd Brink. Github gebruikers Een overzicht van de gebruikers is te vinden op: https://github.com/orgs/Geonovum/people. In principe geldt de regels: als je lid bent van Geonovum Teams dan hoor je ook bij de Geonovum GitHub organisatie. De inhoudelijk beheerders kunnen besluiten daar van af te wijken. Er is geen bezwaar tegen het gebruiken van een priv\u00e9 account binnen de github omgeving. Bij vertrek wordt je omgezet naar 'External Collaborator'. GitHub teams Er is een aantal teams gemaakt binnen Geonovum. Deze zijn te vinden op: https://github.com/orgs/Geonovum/teams. Het is de bedoeling dat alle repositories die beheerd worden aan een team is toegekend met als doel dat het team aanspreekpunt is voor het repository. Team namen eindigen op ' team'. Bijvoorbeeld 'DSO team'. GitHub repositories Dit zijn de Geonovum reopsitories: https://github.com/orgs/Geonovum/repositories. Er is ook een dashboard met een overzicht van publieke git repositories: DashboardGit . Richtlijnen voor het inrichten van repositories zijn er nog niet. Wel is er een template voor respec documenten: NL-ReSpec-GN-template Naamgevingsconventies GitHub Deze zitten voor een deel in de ReSpec Er is een lijst met prefixes: dso- digitale ondersteuning omgevingswet. ow- omgevingswet. Dit lijkt wel een duplicaat. Laten opgaan in dso-? KP-APIs- kennisplatform API's. xml_ Dit was een prefix voor dso repositories maar wordt voor nieuwe repositories niet meer gebruikt. disgeo- DisGeo","title":"Manual"},{"location":"GitHub/#github","text":"In dit hoofdstuk komen zowel GitHub als GitHub desktop client aan de orde. Geonovum heeft op github een eigen \u2018onderkomen\u2019 op: https://github.com/Geonovum . In dit hoofdstuk staat beschreven wat je moet doen om \u201cup-and-running\u201d te komen voor het uitvoeren van je beheertaken op GitHub. Hoe je een account aanmaakt, en hoe je de benodigde software installeert.","title":"GitHub"},{"location":"GitHub/#installatie-en-inrichting","text":"","title":"Installatie en inrichting"},{"location":"GitHub/#aanmaken-github-account","text":"Als je nog geen GitHub account hebt, of als je een apart GitHub account wil maken voor je Geonovum werkzaamheden, ga naar: https://github.com/join/get-started . Dan zie je het scherm dat hiernaast staat. Maak in dat scherm een usernaam aan waarmee je op GitHub gaat werken. Tip : als je met meerdere accounts gaat werken, zorg er dan voor dat aan de accountnaam kan zien waarvoor die dan gebruikt moet worden. (Bijvoorbeeld door die naam te eindigen op \u2013GNM). Verplicht is dit niet. Vul in het veld username je nieuwe GitHub naam in. Vul in het veld email adress je geonovum mailadres in Klik vervolgens op \u201cCreate Account\u201d en dan wordt je account aangemaakt. Kies in dit scherm je persoonlijke plan. Bij Geonovum gebruiken we de gratis versie, dus selecteer die.","title":"Aanmaken GitHub account"},{"location":"GitHub/#installeren-github-desktop","text":"Ga in je internet browser naar https://desktop.github.com/ Klik daar op download for Windows (64bit). Nu wordt de installer gedownload, en dat zie je linksonder in je browser zoals in het plaatje rechts: Na starten van de installer verschijnt het scherm hiernaast Het volgende scherm zal nu openen Het aanmaken van een account hoeven we niet meer te doen, want dat hebben we in de vorige stap al gedaan. Dus klik op Sign Into Github.com Na Klikken op Sign into Github.com, verschijnt dit scherm. Hier hoeft verder niks ingevuld te worden, dus klik op continue. In dit scherm kan je desgewenst het vinkje bij het versturen van anonieme data uitzetten. Daarna klikken op Finish. GitHub Desktop is nu ge\u00efnstalleerd.","title":"Installeren GitHub desktop"},{"location":"GitHub/#opties-voor-github-desktop","text":"GitHub Desktop kan worden aangepast aan persoonlijke voorkeuren. Dat doe je door in het hoofdscherm van de GitHub Desktop op het menu \u201cFile\u201d te klikken en vervolgens voor \u201cOpties\u201d te kiezen. In het Accounts scherm staat hoe je bent ingelogd bij GitHub. Hier kan je uitloggen en opnieuw inloggen als je meerdere GitHub Accounts hebt. In het tabblad \u201cGit\u201d kan je je Github Naam eventueel aanpassen. De GitHub Email is de email die intern binnen Github wordt gebruikt. Die hoeft niet gewijzigd te worden. In het tabblad \u201cAppearance\u201d kan je ervoor kiezen om in Light of Dark modus te werken. Hiermee verander je alleen de achtergrondkleur van de GitHub Desktop omgeving. In dit scherm kan je de voorkeurs editor instellen. Default wordt gekeken naar de reeds aanwezige tekst editors. Omdat GitHub van nature een samenwerkomgeving is voor het ontwikkelen van programmatuur, gaat het hier om \u201cplatte tekst\u201d editors.","title":"Opties voor GitHub desktop"},{"location":"GitHub/#werkwijze-geonovum","text":"","title":"Werkwijze Geonovum"},{"location":"GitHub/#de-geonovum-github-pagina","text":"Geonovum heeft een eigen GitHub Bedrijfspagina: https://github.com/Geonovum . Voor alle projecten die een product maken of beheren wordt een repository aangemaakt. Het aanmaken van een repository staat beschreven in paragraaf 2.3.1 .","title":"De Geonovum GitHub pagina"},{"location":"GitHub/#mappenstructuur-in-de-respository","text":"In de Repository maak je indien nodig submappen aan. Submappen zijn handig als er in je Repository meer dan \u00e9\u00e9n ReSpec document komt te staan. Over ReSpec meer in hoofdstuk 3. Hiernaast een afbeelding van de GitHub Repository voor MIM. Twee mappen omdat MIM twee documenten bevat. Ook maakt GitHub standaard een readme.md aan. De readme staat in het \u201cMarkdown\u201d formaat, waarover in de volgende paragraaf meer.","title":"Mappenstructuur in de respository"},{"location":"GitHub/#readmemd","text":"In de readme.md file staat nog eens beschreven Wat de inhoud van de Repository is. Neem ook de link naar de webversie van de documenten hier op, dan is het voor bezoekers gemakkelijker om het document te openen in een browser. Neem altijd een link naar https://docs.geostandaarden.nl/ op, en in het geval het technische documenten betreft zoals UML\u2019s, XSD\u2019s, GML\u2019s, XML\u2019s een link naar http://register.geostandaarden.nl/ in het Readme bestand op.","title":"Readme.md"},{"location":"GitHub/#aan-de-slag-met-github","text":"In deze paragraaf een beschrijving van hoe je in GitHub een nieuwe repository aanmaakt, en hoe je die synchroniseert met je lokale GitHub client.","title":"Aan de slag met GitHub"},{"location":"GitHub/#het-maken-van-een-nieuwe-repository","text":"Een nieuwe repository maak je aan in de Centrale GitHub omgeving. Klik in de banner bovenaan de pagina, naast je profielfoto op \u201c+\u201d en kies \u201cCreate Repository\u201d Nadat je op \u201c+\u201d hebt geklikt, verschijnt het scherm hieronder. Vul hier de naam van de repository in. Deze naam moet uniek zijn binnen de Geonovum omgeving, en voor MIM is dat geworden: MIM-Werkomgeving Denk goed na over de naam, en houd het kort en bondig, immers deze naam wordt onderdeel van de URL van de Repository Vul ook de beschrijving in van het project. Belangrijk is dat je lokaal dus op je werkplek de mappen ook logisch inricht. Maak dus eerst lokaal een map aan waarin je je lokale Repository neerzet. Het is slim om alle lokale Repositories onder een mapje \u201cGitHub\u201d neer te zetten. Geef als local path de naam van de GitHub map op. GitHub zal dan de naam van de standaard als mapnaam aanmaken onder de lokale GitHub map. Het is wel zo netjes om een readme file aan te maken, hierin zet je een korte omschrijving van de repository. Vinkje aanzetten dus. Klik vervolgens op \u201cCreate Repository\u201d","title":"Het maken van een nieuwe repository"},{"location":"GitHub/#github-clone-eerste-keer-ophalen-van-de-centrale-repository","text":"Start de GitHub Client, en kies in het menu File voor Clone Repository. En kies de Repository die je wil clonen (in dit geval Geonovum/MIM). Als Local Path kies je een logische plek op je PC/Laptop. (Tip: het is handig om \u00e9\u00e9n plek voor je Github Repositories te maken, bijvoorbeeld C:. Na het aanklikken van de knop clone wordt een lokale kopie gemaakt. Github weet welke versie je hebt opgehaald, en zal de wijzingen die je maakt netjes voor je bijhouden. In de map die je als local path hebt opgegeven komt de mappen structuur te staan zoals hierboven beschreven.","title":"GitHub Clone: eerste keer ophalen van de centrale repository"},{"location":"GitHub/#github-pull-origin-ophalen-van-wijzigingen","text":"Een pull commando werkt de lokale versie van je GitHub Repository bij. Wijzigingen die zijn gedaan in de centrale repository (dus op Github.com) worden ook doorgevoerd in je lokale kopie. Het uitvoeren van een pull doe je door in het menu Repository op pull te klikken. NB: Voer dit commando regelmatig uit als er meerdere mensen in de repository werken, om conflicterende wijzigingen te voorkomen.","title":"GitHub Pull origin: ophalen van wijzigingen"},{"location":"GitHub/#github-commit-to-master-wijzigingen-opslaan","text":"Met de knop Commit to master zet je de wijzigingen die je hebt gedaan klaar om te uploaden naar de Centrale GitHub Repository. GitHub maakt daartoe een versie aan, die je verplicht voorziet van een summary en optioneel van een Description Let op: met het committen heb je dus nog niks ge-upload.","title":"GitHub Commit to Master: wijzigingen opslaan"},{"location":"GitHub/#github-push-origin-of-pull-request-wijzigingen-uploaden","text":"Nadat je de wijzigingen hebt gecommit, moeten ze richting de centrale repository. Nu zijn er twee mogelijkheden. Ofwel je hebt schrijfrechten op de Centrale Repository, of je hebt ze niet. In het eerste geval kan je een Push Origin uitvoeren, dan worden de wijzigingen meteen in de Centrale GitHub Repository verwerkt. In het tweede geval doe je een Pull request bij de eigenaar van de Repository om de wijzigingen door te voeren. Github maakt dan een eigen versie voor je aan (dat heet een fork) en vraagt aan de eigenaar van de Repository om die fork te verwerken in de Centrale Repository.","title":"GitHub Push origin of Pull request: wijzigingen uploaden"},{"location":"GitHub/#enkele-regels-over-github-binnen-geonovum","text":"Geonovum heeft binnen github een team: https://github.com/Geonovum.","title":"Enkele regels over GitHub binnen Geonovum"},{"location":"GitHub/#github-beheer","text":"Github teamleden met beheerders rechten zijn te vinden via: https://github.com/orgs/Geonovum/people?query=role%3Aowner Daarnaast zijn er nog drie inhoudelijk beheerders vanuit Geonovum: Arnoud de Boer, Frank Terpstra en Linda vd Brink.","title":"Github beheer"},{"location":"GitHub/#github-gebruikers","text":"Een overzicht van de gebruikers is te vinden op: https://github.com/orgs/Geonovum/people. In principe geldt de regels: als je lid bent van Geonovum Teams dan hoor je ook bij de Geonovum GitHub organisatie. De inhoudelijk beheerders kunnen besluiten daar van af te wijken. Er is geen bezwaar tegen het gebruiken van een priv\u00e9 account binnen de github omgeving. Bij vertrek wordt je omgezet naar 'External Collaborator'.","title":"Github gebruikers"},{"location":"GitHub/#github-teams","text":"Er is een aantal teams gemaakt binnen Geonovum. Deze zijn te vinden op: https://github.com/orgs/Geonovum/teams. Het is de bedoeling dat alle repositories die beheerd worden aan een team is toegekend met als doel dat het team aanspreekpunt is voor het repository. Team namen eindigen op ' team'. Bijvoorbeeld 'DSO team'.","title":"GitHub teams"},{"location":"GitHub/#github-repositories","text":"Dit zijn de Geonovum reopsitories: https://github.com/orgs/Geonovum/repositories. Er is ook een dashboard met een overzicht van publieke git repositories: DashboardGit . Richtlijnen voor het inrichten van repositories zijn er nog niet. Wel is er een template voor respec documenten: NL-ReSpec-GN-template","title":"GitHub repositories"},{"location":"GitHub/#naamgevingsconventies-github","text":"Deze zitten voor een deel in de ReSpec Er is een lijst met prefixes: dso- digitale ondersteuning omgevingswet. ow- omgevingswet. Dit lijkt wel een duplicaat. Laten opgaan in dso-? KP-APIs- kennisplatform API's. xml_ Dit was een prefix voor dso repositories maar wordt voor nieuwe repositories niet meer gebruikt. disgeo- DisGeo","title":"Naamgevingsconventies GitHub"},{"location":"Imvertor/","text":"Imvertor TODO: invullen","title":"Imvertor"},{"location":"Imvertor/#imvertor","text":"TODO: invullen","title":"Imvertor"},{"location":"Inleiding/","text":"Inleiding Dit document bevat een beschrijving van de Geonovum werkwijze en ook een handleiding behorend bij die werkwijze. Aanleiding Om de standaarden die in beheer zijn bij Geonovum te kunnen beheren, wordt gebruik gemaakt van verschillende tooling. Documenten die behoren bij de standaarden worden gepubliceerd op https://docs.geostandaarden.nl als HTML bestanden, deze HTML bestanden worden aangemaakt met een tool van W3C: ReSpec. ReSpec maakt gebruik van input bestanden om de HTML te genereren. Deze inputbestanden (de content) wordt gemaakt in een formaat: Markdown. Deze Markdown bestanden kunnen worden aangemaakt met text editor zoals Visual Studio van Microsoft of Notepad++. Visual Studio heeft het voordeel dat de editor mooi integreert met de Github Desktop Client. GitHub tenslotte wordt gebruikt als de \u201crepository\u201d, waarin alle bestanden die bij een standaard horen, komen te staan. Dit document beschrijft hoe je een GitHub Account maakt, hoe je GitHub Desktop Client installeert en gebruikt, hoe je een Respec mappenstructuur opbouwt, welke bestanden er nodig zijn voor een standaard, en hoe je de verschillende versies van een standaard genereert. Ook wordt uitgelegd hoe je de Markdown plugin in Microsoft Word installeert en gebruikt. Leeswijzer In de menubalk aan de bovenkant zie je de verschillende onderwerpen die in deze documentatie behandeld worden. Van sommige van die onderwerpen zijn nog subonderwerpen beschreven. Kies een onderwerp en in de linkermenubalk verschijnt een hoofdstukindeling. Ook is er zoekfunctie.","title":"Inleiding"},{"location":"Inleiding/#inleiding","text":"Dit document bevat een beschrijving van de Geonovum werkwijze en ook een handleiding behorend bij die werkwijze.","title":"Inleiding"},{"location":"Inleiding/#aanleiding","text":"Om de standaarden die in beheer zijn bij Geonovum te kunnen beheren, wordt gebruik gemaakt van verschillende tooling. Documenten die behoren bij de standaarden worden gepubliceerd op https://docs.geostandaarden.nl als HTML bestanden, deze HTML bestanden worden aangemaakt met een tool van W3C: ReSpec. ReSpec maakt gebruik van input bestanden om de HTML te genereren. Deze inputbestanden (de content) wordt gemaakt in een formaat: Markdown. Deze Markdown bestanden kunnen worden aangemaakt met text editor zoals Visual Studio van Microsoft of Notepad++. Visual Studio heeft het voordeel dat de editor mooi integreert met de Github Desktop Client. GitHub tenslotte wordt gebruikt als de \u201crepository\u201d, waarin alle bestanden die bij een standaard horen, komen te staan. Dit document beschrijft hoe je een GitHub Account maakt, hoe je GitHub Desktop Client installeert en gebruikt, hoe je een Respec mappenstructuur opbouwt, welke bestanden er nodig zijn voor een standaard, en hoe je de verschillende versies van een standaard genereert. Ook wordt uitgelegd hoe je de Markdown plugin in Microsoft Word installeert en gebruikt.","title":"Aanleiding"},{"location":"Inleiding/#leeswijzer","text":"In de menubalk aan de bovenkant zie je de verschillende onderwerpen die in deze documentatie behandeld worden. Van sommige van die onderwerpen zijn nog subonderwerpen beschreven. Kies een onderwerp en in de linkermenubalk verschijnt een hoofdstukindeling. Ook is er zoekfunctie.","title":"Leeswijzer"},{"location":"Markdown/","text":"Markdown Voor het extern publiceren van documenten en standaarden gebruiken we \u201cReSpec\u201d. ReSpec werkt met HTML en Javascript. Dat is niet voor iedereen de meest voor de hand liggende documentatie tooling. Gelukkig ondersteunt ReSpec ook het gebruik van Markdown Markdown is een lichtgewicht opmaaktaal op basis van platte tekst die zodanig ontworpen is dat het gemakkelijk valt te converteren naar HTML en andere formaten middels een applicatie met dezelfde naam. Markdown wordt vaak gebruikt voor de opmaak van project documentatie (README-bestanden), eenvoudige CMS-systemen en berichten in online fora. Tekst in deze opmaaktaal is gemakkelijk te maken met een simpele teksteditor. Het ontwerpdoel van de taal is leesbaarheid. Teksten geschreven met behulp van Markdown worden geacht al leesbaar te zijn voordat opmaak is toegepast op de tekst. Opmaakinstructies en tags zijn dan ook niet te vinden in pure Markdown. Resources: Markdown Tutorial Markdown Reference Werken met Markdown in Visual Code Een optie om de Markdown bestanden te editen is het gebruiken van Visual Studio Code. Dit is een editor die eigenlijk voor het schrijven van software is, maar ook heel goed te gebruiken als teksteditor. Het voordeel is dat je alle bestanden die bij je ReSpec omgeving horen, in \u00e9\u00e9n editor ziet staan, en kan aanpassen. Het biedt je meer overzicht dan werken in Word. Een voordeel van het werken met Micosoft Visual Studio is dat het mooi integreert met de GitHub Desktop Client, zo kan je meteen de editor opstarten vanuit de client, en kan je conflicten bij het committen van versies mooi oplossen. Als je alleen maar content wil editen, biedt Microsoft Word met de Markdown plugin voldoende functionaliteit. Vooral het maken van Markdown tabellen in een tekst editor kan vervelend zijn. in Een handige online tool om tabellen naar Markdown te converteren is https://www.tablesgenerator.com/markdown_tables . Ook is er een handige plugin om Visual Code tabellen te bewerken: Markdown Table Werken met Markdown in Notepad++ Deze teksteditor is gratis te downloaden en geeft visueel (in kleuren) ondersteuning in de code en bij fouten daarin.","title":"Markdown"},{"location":"Markdown/#markdown","text":"Voor het extern publiceren van documenten en standaarden gebruiken we \u201cReSpec\u201d. ReSpec werkt met HTML en Javascript. Dat is niet voor iedereen de meest voor de hand liggende documentatie tooling. Gelukkig ondersteunt ReSpec ook het gebruik van Markdown Markdown is een lichtgewicht opmaaktaal op basis van platte tekst die zodanig ontworpen is dat het gemakkelijk valt te converteren naar HTML en andere formaten middels een applicatie met dezelfde naam. Markdown wordt vaak gebruikt voor de opmaak van project documentatie (README-bestanden), eenvoudige CMS-systemen en berichten in online fora. Tekst in deze opmaaktaal is gemakkelijk te maken met een simpele teksteditor. Het ontwerpdoel van de taal is leesbaarheid. Teksten geschreven met behulp van Markdown worden geacht al leesbaar te zijn voordat opmaak is toegepast op de tekst. Opmaakinstructies en tags zijn dan ook niet te vinden in pure Markdown. Resources: Markdown Tutorial Markdown Reference","title":"Markdown"},{"location":"Markdown/#werken-met-markdown-in-visual-code","text":"Een optie om de Markdown bestanden te editen is het gebruiken van Visual Studio Code. Dit is een editor die eigenlijk voor het schrijven van software is, maar ook heel goed te gebruiken als teksteditor. Het voordeel is dat je alle bestanden die bij je ReSpec omgeving horen, in \u00e9\u00e9n editor ziet staan, en kan aanpassen. Het biedt je meer overzicht dan werken in Word. Een voordeel van het werken met Micosoft Visual Studio is dat het mooi integreert met de GitHub Desktop Client, zo kan je meteen de editor opstarten vanuit de client, en kan je conflicten bij het committen van versies mooi oplossen. Als je alleen maar content wil editen, biedt Microsoft Word met de Markdown plugin voldoende functionaliteit. Vooral het maken van Markdown tabellen in een tekst editor kan vervelend zijn. in Een handige online tool om tabellen naar Markdown te converteren is https://www.tablesgenerator.com/markdown_tables . Ook is er een handige plugin om Visual Code tabellen te bewerken: Markdown Table","title":"Werken met Markdown in Visual Code"},{"location":"Markdown/#werken-met-markdown-in-notepad","text":"Deze teksteditor is gratis te downloaden en geeft visueel (in kleuren) ondersteuning in de code en bij fouten daarin.","title":"Werken met Markdown in Notepad++"},{"location":"PrimitieveDatatypes/","text":"Primitieve Datatypes UML modellen maken gebruik van primitive datatypes zoals bijvoorbeeld gedefinieerd in het MIM . In: svn.geostandaarden.nl/Datatypes zijn drie collecties met primitieve types opgenomen die alle primitieve types bevat die in Geonovum UML modellen gebruikt zijn. De volgende collecties zijn er: De primtieve types genoend in MIM De geometrietypes genoemd in ISO19107 Overige datatypes die niet in de twee lijstjes hieronder vallen Deze packages zijn in beheer bij @wilkoquak. Het is de bedoeling dat er in [Imvertor] een mapping komt die precies overeenkomt het deze drie collecties types Geometrie datatypes In dit package zitten de geometrische datatypes zoals genoemd in ISO19107:2003 . MIM datatypes In dit package zitten de geometrische datatypes zoals genoemd in MIM . Geonovum datatypes In dit package zitten datatypes die niet in de twee eerdergenoemde packages vallen maar wel ergens gebruikt zijn bij Geonovum.","title":"UML"},{"location":"PrimitieveDatatypes/#primitieve-datatypes","text":"UML modellen maken gebruik van primitive datatypes zoals bijvoorbeeld gedefinieerd in het MIM . In: svn.geostandaarden.nl/Datatypes zijn drie collecties met primitieve types opgenomen die alle primitieve types bevat die in Geonovum UML modellen gebruikt zijn. De volgende collecties zijn er: De primtieve types genoend in MIM De geometrietypes genoemd in ISO19107 Overige datatypes die niet in de twee lijstjes hieronder vallen Deze packages zijn in beheer bij @wilkoquak. Het is de bedoeling dat er in [Imvertor] een mapping komt die precies overeenkomt het deze drie collecties types","title":"Primitieve Datatypes"},{"location":"PrimitieveDatatypes/#geometrie-datatypes","text":"In dit package zitten de geometrische datatypes zoals genoemd in ISO19107:2003 .","title":"Geometrie datatypes"},{"location":"PrimitieveDatatypes/#mim-datatypes","text":"In dit package zitten de geometrische datatypes zoals genoemd in MIM .","title":"MIM datatypes"},{"location":"PrimitieveDatatypes/#geonovum-datatypes","text":"In dit package zitten datatypes die niet in de twee eerdergenoemde packages vallen maar wel ergens gebruikt zijn bij Geonovum.","title":"Geonovum datatypes"},{"location":"ReSpec-Checklists/","text":"Checklists In dit hoofdstuk staat een aantal checklists die je kan gebruiken als je vanuit GitHub en ReSpec \u201cVersies\u201d gaat aanmaken. Bijvoorbeeld hoe maak je een nieuwe GitHub repository aan, of hoe maak je vanuit een werkversie een consultatieversie aan, Een nieuwe ReSpec repository maken Stap Omschrijving 1 Maak een nieuw repository op basis van de ReSpec template. Open: https://github.com/Geonovum/NL-ReSpec-GN-template en kies 'Use this template' 2 Check met behulp van GitHub Desktop het nieuwe repository uit 'File/Clone Repository...'. 3 Pas in index.html de betreffende velden aan 4 Pas in config.js de betreffende velden aan 5 Maak content in Markdown Consultatie versie (CV) maken Stap Omschrijving Check 1 Edit en controleer config.js - configureer alles goed voor een consultatieversie specStatus: \"GN-CV\", specType: het doc type. pubDomain: de documentgroep waar het doc toe behoort. Moet ingevuld zijn. Er is een lijst met afkortingen. Je mag ook een nieuwe groep bedneken maar geen wildgroei graag publishDate: moet ingevuld zijn met de datum van publicatie van de consultatieversie. \"jjjj-mm-dd\", Shortname: moet ingevuld zijn met korte naam voor het document. Dit wordt onderdeel van de URL. Moet uniek zijn binnen pubdomain (afgezien van versies). Als er al eerder een versie gepubliceerd is (stabiele versie, dus afgezien van de werkversie in github), kan Respec bovenin een document de navigatie naar vorige versie goed genereren. Daarvoor moet je ook invullen: Previousmaturity: wat de status toen was. previousPublishDate: vorige publicatiedatum (jjjj-mm-dd) 2 Maak een snapshot (met de knop \u201cBewaar Snapshot\u201d vanuit Respec) 3 Kies \u201cHTML\u201d en noem dit bestand \u201csnapshot.html\u201d 4 Commit het en push het naar dezelfde folder als waar index.html staat in je Github repository 5 Valideer HTML en links: 1. Neem de link naar de werkversie van je document, bv https://geonovum.github.io/Metadata-ISO19115/, en zet daar \u2018snapshot.html\u2019 achter. Dus https://geonovum.github.io/Metadata-ISO19115/snapshot.html 2. Ga om HTML te valideren naar https://validator.w3.org. Plak de github.io link uit stap 1 in het Address veld en klik Check. De validator gaat nu valideren en geeft het foutrapport terug. 3. Ga om links te checken naar https://validator.w3.org/checklink. Plak de github.io link uit stap 1 in het input veld en klik weer op Check. De links worden nu gecontroleerd. Dit duurt even omdat op de achtergrond alle links in het document nu bezocht worden. Als het klaar is krijg je het rapport terug. NB als er links naar docs.geostandaarden.nl, naar het document dat je aan het checken bent, worden gerapporteerd als gebroken, kun je dit negeren. Dit komt doordat het document daar nu nog niet gepubliceerd staat. 4. Los eventuele HTML fouten en gebroken links op en maak een nieuw snapshot, en commit dit naar dezelfde plek als de vorige keer. 6 Maak een release tag conform de naamgevingsconventie: \\{specStatus\\}-\\{specType\\}-\\{shortName\\}-\\{publishDate\\} \\[Todo: een paar voorbeelden geven\\] 7 Het script kopieert nu automatisch (NB: dit moet wel eenmalig geconfigureerd zijn als \u2018webhook\u2019 in de github repository!) het snapshot.html en de bijbehorende afbeeldingen naar http://docs.geonovum.nl 8 Na succesvolle publicatie: zet de specStatus in config.js terug op GN-WV Vul previousMaturity in met GN-CV Vul previousPublishDate in met de datum van de zojuist gepubliceerde consultatieversie Vaststellingsversie (VV) maken Moet nog worden ingevuld obv. de laatste inzichten Definitieve versie (DEF) maken Stap Omschrijving Check 1 Edit en controleer config.js - configureer alles goed voor een definitieve versie specStatus: \"GN-DEF\", specType: het doc type. pubDomain: de documentgroep waar het doc toe behoort. Moet ingevuld zijn. Er is een lijst met afkortingen. Je mag ook een nieuwe groep bedneken maar geen wildgroei graag publishDate: moet ingevuld zijn met de datum van publicatie van de definitieve versie. \"jjjj-mm-dd\", Shortname: moet ingevuld zijn met korte naam voor het document. Dit wordt onderdeel van de URL. Moet uniek zijn binnen pubdomain (afgezien van versies). Als er al eerder een versie gepubliceerd is (stabiele versie, dus afgezien van de werkversie in github), kan Respec bovenin een document de navigatie naar vorige versie goed genereren. Daarvoor moet je ook invullen: Previousmaturity: wat de status toen was. previousPublishDate: vorige publicatiedatum (jjjj-mm-dd) 2 Maak een snapshot (met de knop \u201cBewaar Snapshot\u201d vanuit Respec) 3 Kies \u201cHTML\u201d en noem dit bestand \u201csnapshot.html\u201d 4 Commit het en push het naar dezelfde folder als waar index.html staat in je Github repository 5 Valideer HTML en links: 1. Neem de link naar de werkversie van je document, bv https://geonovum.github.io/Metadata-ISO19115/, en zet daar \u2018snapshot.html\u2019 achter. Dus https://geonovum.github.io/Metadata-ISO19115/snapshot.html 2. Ga om HTML te valideren naar https://validator.w3.org. Plak de github.io link uit stap 1 in het Address veld en klik Check. De validator gaat nu valideren en geeft het foutrapport terug. 3. Ga om links te checken naar https://validator.w3.org/checklink. Plak de github.io link uit stap 1 in het input veld en klik weer op Check. De links worden nu gecontroleerd. Dit duurt even omdat op de achtergrond alle links in het document nu bezocht worden. Als het klaar is krijg je het rapport terug. NB als er links naar docs.geostandaarden.nl, naar het document dat je aan het checken bent, worden gerapporteerd als gebroken, kun je dit negeren. Dit komt doordat het document daar nu nog niet gepubliceerd staat. 4. Los eventuele HTML fouten en gebroken links op en maak een nieuw snapshot, en commit dit naar dezelfde plek als de vorige keer. 6 7 Het script kopieert nu automatisch (NB: dit moet wel eenmalig geconfigureerd zijn als \u2018webhook\u2019 in de github repository!) het snapshot.html en de bijbehorende afbeeldingen naar http://docs.geostandaarden.nl Hoe dit werkt is beschreven in: https://github.com/Geonovum/technisch-register-2019 8 Na succesvolle publicatie: zet de specStatus in config.js terug op GN-WV Vul previousMaturity in met GN-DEF Vul previousPublishDate in met de datum van de zojuist gepubliceerde definitieve versie","title":"Checklists"},{"location":"ReSpec-Checklists/#checklists","text":"In dit hoofdstuk staat een aantal checklists die je kan gebruiken als je vanuit GitHub en ReSpec \u201cVersies\u201d gaat aanmaken. Bijvoorbeeld hoe maak je een nieuwe GitHub repository aan, of hoe maak je vanuit een werkversie een consultatieversie aan,","title":"Checklists"},{"location":"ReSpec-Checklists/#een-nieuwe-respec-repository-maken","text":"Stap Omschrijving 1 Maak een nieuw repository op basis van de ReSpec template. Open: https://github.com/Geonovum/NL-ReSpec-GN-template en kies 'Use this template' 2 Check met behulp van GitHub Desktop het nieuwe repository uit 'File/Clone Repository...'. 3 Pas in index.html de betreffende velden aan 4 Pas in config.js de betreffende velden aan 5 Maak content in Markdown","title":"Een nieuwe ReSpec repository maken"},{"location":"ReSpec-Checklists/#consultatie-versie-cv-maken","text":"Stap Omschrijving Check 1 Edit en controleer config.js - configureer alles goed voor een consultatieversie specStatus: \"GN-CV\", specType: het doc type. pubDomain: de documentgroep waar het doc toe behoort. Moet ingevuld zijn. Er is een lijst met afkortingen. Je mag ook een nieuwe groep bedneken maar geen wildgroei graag publishDate: moet ingevuld zijn met de datum van publicatie van de consultatieversie. \"jjjj-mm-dd\", Shortname: moet ingevuld zijn met korte naam voor het document. Dit wordt onderdeel van de URL. Moet uniek zijn binnen pubdomain (afgezien van versies). Als er al eerder een versie gepubliceerd is (stabiele versie, dus afgezien van de werkversie in github), kan Respec bovenin een document de navigatie naar vorige versie goed genereren. Daarvoor moet je ook invullen: Previousmaturity: wat de status toen was. previousPublishDate: vorige publicatiedatum (jjjj-mm-dd) 2 Maak een snapshot (met de knop \u201cBewaar Snapshot\u201d vanuit Respec) 3 Kies \u201cHTML\u201d en noem dit bestand \u201csnapshot.html\u201d 4 Commit het en push het naar dezelfde folder als waar index.html staat in je Github repository 5 Valideer HTML en links: 1. Neem de link naar de werkversie van je document, bv https://geonovum.github.io/Metadata-ISO19115/, en zet daar \u2018snapshot.html\u2019 achter. Dus https://geonovum.github.io/Metadata-ISO19115/snapshot.html 2. Ga om HTML te valideren naar https://validator.w3.org. Plak de github.io link uit stap 1 in het Address veld en klik Check. De validator gaat nu valideren en geeft het foutrapport terug. 3. Ga om links te checken naar https://validator.w3.org/checklink. Plak de github.io link uit stap 1 in het input veld en klik weer op Check. De links worden nu gecontroleerd. Dit duurt even omdat op de achtergrond alle links in het document nu bezocht worden. Als het klaar is krijg je het rapport terug. NB als er links naar docs.geostandaarden.nl, naar het document dat je aan het checken bent, worden gerapporteerd als gebroken, kun je dit negeren. Dit komt doordat het document daar nu nog niet gepubliceerd staat. 4. Los eventuele HTML fouten en gebroken links op en maak een nieuw snapshot, en commit dit naar dezelfde plek als de vorige keer. 6 Maak een release tag conform de naamgevingsconventie: \\{specStatus\\}-\\{specType\\}-\\{shortName\\}-\\{publishDate\\} \\[Todo: een paar voorbeelden geven\\] 7 Het script kopieert nu automatisch (NB: dit moet wel eenmalig geconfigureerd zijn als \u2018webhook\u2019 in de github repository!) het snapshot.html en de bijbehorende afbeeldingen naar http://docs.geonovum.nl 8 Na succesvolle publicatie: zet de specStatus in config.js terug op GN-WV Vul previousMaturity in met GN-CV Vul previousPublishDate in met de datum van de zojuist gepubliceerde consultatieversie","title":"Consultatie versie (CV) maken"},{"location":"ReSpec-Checklists/#vaststellingsversie-vv-maken","text":"Moet nog worden ingevuld obv. de laatste inzichten","title":"Vaststellingsversie (VV) maken"},{"location":"ReSpec-Checklists/#definitieve-versie-def-maken","text":"Stap Omschrijving Check 1 Edit en controleer config.js - configureer alles goed voor een definitieve versie specStatus: \"GN-DEF\", specType: het doc type. pubDomain: de documentgroep waar het doc toe behoort. Moet ingevuld zijn. Er is een lijst met afkortingen. Je mag ook een nieuwe groep bedneken maar geen wildgroei graag publishDate: moet ingevuld zijn met de datum van publicatie van de definitieve versie. \"jjjj-mm-dd\", Shortname: moet ingevuld zijn met korte naam voor het document. Dit wordt onderdeel van de URL. Moet uniek zijn binnen pubdomain (afgezien van versies). Als er al eerder een versie gepubliceerd is (stabiele versie, dus afgezien van de werkversie in github), kan Respec bovenin een document de navigatie naar vorige versie goed genereren. Daarvoor moet je ook invullen: Previousmaturity: wat de status toen was. previousPublishDate: vorige publicatiedatum (jjjj-mm-dd) 2 Maak een snapshot (met de knop \u201cBewaar Snapshot\u201d vanuit Respec) 3 Kies \u201cHTML\u201d en noem dit bestand \u201csnapshot.html\u201d 4 Commit het en push het naar dezelfde folder als waar index.html staat in je Github repository 5 Valideer HTML en links: 1. Neem de link naar de werkversie van je document, bv https://geonovum.github.io/Metadata-ISO19115/, en zet daar \u2018snapshot.html\u2019 achter. Dus https://geonovum.github.io/Metadata-ISO19115/snapshot.html 2. Ga om HTML te valideren naar https://validator.w3.org. Plak de github.io link uit stap 1 in het Address veld en klik Check. De validator gaat nu valideren en geeft het foutrapport terug. 3. Ga om links te checken naar https://validator.w3.org/checklink. Plak de github.io link uit stap 1 in het input veld en klik weer op Check. De links worden nu gecontroleerd. Dit duurt even omdat op de achtergrond alle links in het document nu bezocht worden. Als het klaar is krijg je het rapport terug. NB als er links naar docs.geostandaarden.nl, naar het document dat je aan het checken bent, worden gerapporteerd als gebroken, kun je dit negeren. Dit komt doordat het document daar nu nog niet gepubliceerd staat. 4. Los eventuele HTML fouten en gebroken links op en maak een nieuw snapshot, en commit dit naar dezelfde plek als de vorige keer. 6 7 Het script kopieert nu automatisch (NB: dit moet wel eenmalig geconfigureerd zijn als \u2018webhook\u2019 in de github repository!) het snapshot.html en de bijbehorende afbeeldingen naar http://docs.geostandaarden.nl Hoe dit werkt is beschreven in: https://github.com/Geonovum/technisch-register-2019 8 Na succesvolle publicatie: zet de specStatus in config.js terug op GN-WV Vul previousMaturity in met GN-DEF Vul previousPublishDate in met de datum van de zojuist gepubliceerde definitieve versie","title":"Definitieve versie (DEF) maken"},{"location":"ReSpec/","text":"ReSpec ReSpec is een tool van W3C die het schrijven van specifications makkelijker maakt. ReSpec zorgt voor een uniforme styling in het document, onderhoudt referenties en verwijzingen naar andere documentatie, verzorgt de inhoudsopgave, zorgt voor links naar vorige en meest recente versies, en heeft een integratie met Github issues. Algemeen Er is een gedetailleerde (Engelstalige) gebruikershandleiding beschikbaar [2] Zie: https://github.com/w3c/respec/wiki/ReSpec-Editor's-Guide , en er is ook een ontwikkelaarshandleiding [3] Zie: https://github.com/w3c/respec/wiki/Developers-Guide te vinden. Geonovum heeft een fork van W3C ReSpec omdat wij sommige onderdelen gecustomised hebben. Deze eigen versie van ReSpec wordt beheerd door de technisch beheerders van ReSpec, en dat valt buiten dit document. De Geonovum wiki over ReSpec kan naast dit hoofdstuk worden gebruikt: https://github.com/Geonovum/respec/wiki Documentatie maken met ReSpec De map indeling Een document dat bij Geonovum met ReSpec wordt gemaakt heeft standaard de onderstaande mappenstructuur. Voor het aanmaken van een nieuw ReSpec Document staat een template klaar. Hoofdmap Naam van de hoofdmap media Map met de vaste naam \u201cmedia\u201d Style.css File met vaste naam, bevat de styling van het document *.png Afbeeldingsbestanden index.html File met de vaste naam \u201cIndex.html\u201d config.js File met de vaste naam \u201cconfig.js\u201d *.md Tekstbestanden (Markdown) die de content bevatten Hieronder een voorbeeld van zo\u2019n mappenstructuur. De .workspace file is een file die is aangemaakt door de \u201cVisual Studio Code\u201d Editor, daarover later meer. In de hoofdmap staan de submap \u201cmedia en de files \u201cindex.html, \u201cconfig.js en *.md (Markdown) files. In de submap \u201cmedia\u201d staat o.a. het bestand \u201cstyle.css\u201d, en ook worden alle afbeeldingen uit het Markdown door de Markdown plugin voor word in de map media gezet. De namen van de afbeeldingen in dit voorbeeld zijn geregenereerd door de Markdown plugin \u201cWritage\u201d (zie paragraaf 3.2 ) Het staat je vrij om die namen herkenbare namen te geven, zolang je deze namen dan ook maar in de verwijzingen worden gebruikt. Het bestand \u201cindex.html\u201d Het bestand index.html zorgt ervoor dat het ReSpec document automatisch wordt geladen in de browser. Bij het laden wordt ook automatisch de geonovum-ReSpec-code geladen en uitgevoerd. Deze code zorgt ervoor dat het document zijn standaard layout krijgt. Index.html heeft een standaard indeling. Hieronder de template zoals gebruikt voorbeeld: <!DOCTYPE html> <html lang=\"nl\"> <head> <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <script src=\"https://cdn.jsdelivr.net/gh/digitalbazaar/respec-mermaid@1.0.1/dist/main.js\" class=\"remove\"></script> <script src=\"https://tools.geostandaarden.nl/respec/config/geonovum-config.js\" class=\"remove\"></script> <script src=\"js/config.js\" class=\"remove\"></script> <script class=\"remove\"> respecConfig = {...organisationConfig, ...respecConfig}</script> <script>document.title = respecConfig.title</script> <title>Default</title> <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"https://tools.geostandaarden.nl/respec/style/logos/Geonovum.ico\" /> <script src=\"https://gitdocumentatie.logius.nl/publicatie/respec/builds/respec-nlgov.js\" class=\"remove\" async></script> </head> <body> <section id=\"abstract\" data-include-format=\"markdown\" data-include=\"abstract.md\"></section> <section id=\"sotd\"></section><!-- Wordt automatisch gevuld --> <!-- voeg hier je eigen hoofdstukken toe --> <section data-include-format=\"markdown\" data-include=\"ch01.md\" class=\"informative\"></section> <section data-include-format=\"markdown\" data-include=\"ch02.md\"></section> <section data-include-format=\"markdown\" data-include=\"mermaid.md\"></section> <section id='conformance'></section> <section id='tof'></section> <section id=\"index\"></section> </body> </html> In de HTML-header wordt de js-ReSpec bibliotheek geladen. Het enige dat in de header mag worden aangepast is de title (tussen \\<title> en \\</title>. Andere aanpassingen die nodig zijn in de header mogen alleen worden gedaan in overleg met de ReSpec beheerders. Een overzicht van de ReSpec beheerders staat in Hoofdstuk 6 In de HTML-Body geldt \u201cvrijheid in gebondenheid\u201d De \\<div> en/of \\<section> regels mogen worden gekopieerd en toegevoegd. Wel belangrijk om de structuur over te nemen, dus als volgt: \\<div id='H00' data-format=\"Markdown\" data-include=\"ToCoVo.md\">\\</div> \\<section id='H01' data-format=\"Markdown\" data-include=\"H1-Inleiding.md\">\\<h2>Inleiding\\</h2>\\</section> Een \\<div> is een sectie plus bijbehorend document, dat niet in de inhoudsopgave terechtkomt. Deze gebruik je bijvoorbeeld voor een Toelichting, een Colofon of een Voorwoord. Een \\<section> komt w\u00e9l in de inhoudsopgave terecht. Deze heeft daarom behalve de data-include van het document, ook (verplicht!) een \\<h2> tag. De tekst tussen \\<h2> en \\</h2> komt in de inhoudsopgave te staan. Het bestand \u201cconfig.js\u201d In config.js wordt een stuurvariabele voor ReSpec gevuld. De waarden in deze variabele worden door ReSpec gebruikt om de layout te bepalen, en bevatten een aantal document-eigenschappen. Hieronder een voorbeeld config.js. let respecConfig = { useLogo: true, useLabel: true, // title is verplicht! Neem hier de titel van het document op ---------------------- title: \"[Neem titel op in config.js]\", //-- specStatus is verplicht! (activeer 1 van de volgende) -------------------------- specStatus: \"wv\", // Werkversie //specStatus: \"cv\", // Consultatieversie //specStatus: \"vv\", // Versie ter vaststelling //specStatus: \"def\", // Vastgestelde versie //specStatus: \"basis\", // Basis Document //-- specType is verplicht bij alle andere dan BASIS --------------------------------- //specType: \"NO\", // Norm //specType: \"ST\", // Standaard //specType: \"IM\", // Informatie Model //specType: \"PR\", // Praktijkrichtlijn specType: \"HR\", // HandReiking //specType: \"WA\", // Werkafspraak //specType: \"BD\", // Beheer Documentatie //specType: \"AL\", // Algemeen document //specType: \"BP\", // Best Practice specType: \"HR\", //-- pubDomain is verplicht! (komt in de URL) ------------------------------------- pubDomain: \"dk\", //-- license: voor de geldende gebruiksvoorwaarden. Default is cc-by. //licence: \"cc-by-nd\", // bronvermelding, geen afgeleide werken (default) //licence: \"cc0\", // Public Domain Dedication licence: \"cc-by\", // Attribution, met bronvermelding //-- shortName is verplicht! (komt in de URL: kies logische afkorting)-------------- shortName: \"NL-ReSpec-GN-template\", //-- publishDate is verplicht ------------------------------------------------------- //-- NB: in de werkversie uitzetten, want dan pakt Respec de pushdate --------------- //publishDate: \"2023-03-28\", //eventueel is het mogelijk een versienummer mee te geven, maar bij Geonovum werken we gewoonlijk alleen met datum als onderdeel van de permanente URI. //publishVersion: \"0.0.2\", //previousVersion: \"0.0.1\", //-- Voor dit blok geldt: alleen als er eerdere versies zijn en altijd beiden aan/uit! //previousPublishDate: \"2014-05-01\", //previousMaturity: \"CV\", //-- de namen van de Editor(s) / Redacteur(en)--------------------------------------- //-- vul in: per Editor: name:, company:, companyURL: ------------------------------- editors: [ { name: \"voornaam achternaam\", company: \"Geonovum\", companyURL: \"https://www.geonovum.nl\", } ], //-- de namen van de auteur(s) ------------------------------------------------------ //-- vul in: per auteur: name:, company:, companyURL: ------------------------------- authors: [ { name: \"voornaam achternaam\", company: \"Geonovum\", companyURL: \"https://www.geonovum.nl\", } ], //neem hier de URL van de github repository op waar het respec document in staat github: \"https://github.com/Geonovum/NL-ReSpec-GN-template\", // Create PDF and link to file in header (optional): alternateFormats: [ { label: \"pdf\", uri: \"template.pdf\", }, ], }; De file config.js is eigenlijk een stukje javascript (JSON) code, het bevat alle mogelijke waarden voor de verschillende versies die wij hanteren bij Geonovum. In de file zelf staat aangegeven welke waarden verplicht zijn, en uit welke waarden te kiezen is. In bovenstaand voorbeeld gaat het om een \u201cWerkversie van een standaard\u201d. SpecStatus De SpecStatus in de configuratie geeft de keuze uit 4 waarden, deze waarden zijn vastgesteld, en mogen niet zomaar uitgebreid of aangepast worden. Elke status hoort bij een formele fase van een ReSpec document. Zie ook de Geonovum ReSpec wiki [4] Zie https://github.com/Geonovum/respec/wiki . GN-WV, Werkversie : Dit is de versie van het document waaraan wordt gewerkt. Deze versie is continu \u201cunder-construction\u201d. GN-CV, Consultatieversie : Dit is een \u201csnapshot\u201d van de versie die \u201cin consultatie\u201d wordt gezet. Aan deze versie wordt niks meer gedaan totdat de consultatie is afgelopen. Daarna worden alle op en aanmerkingen uit de consultatieronde verwerkt. GN-VV, Vaststellingsversie : Dit is een \u201csnapshot\u201d van de versie na het verwerken van de op en aanmerkingen uit de consultatieronde is ontstaan. Deze versie wordt aangeboden aan de programma-raad van Geonovum, om te wordern \u201cvastgesteld\u201d. GN-DEF, Definitieve versie : Dit is de definitieve versie van het document, zoals vastgesteld door de programma-raad. Van deze versie wordt opnieuw een \u201csnapshot\u201d gemaakt in ReSpec. Het resultaat van die snapshot wordt op http://docs.geonovum.nl neergezet. SpecType Het SpecType in de configuratie is een vaste lijst met waarden, deze waarden zijn vastgesteld, en mogen niet zonder overleg met de Technische ReSpec beheerders uitgebreid of aangepast worden. Onderstaande beschrijvingen komen uit het generiek beheerplan [5] Zie: https://www.geonovum.nl/uploads/documents/Geonovum%20GENERIEK%20Beheerplan%20geo-standaarden%20v1.1.pdf . NO, Norm : Een norm is bij een officieel standaardisatie instituut ondergebracht en bevat bindende afspraken. Naast het gebruik van normen is NEN 3610 de enige norm waar Geonovum een inhoudelijke verantwoordelijkheid heeft. Het formele beheer en beslissingen worden genomen in de NEN normcommissie 351 240 waar Geonovum de voorzitter van is. ST, Standaard : Een document met (bindende) afspraken. IM, Informatiemodel : Een standaard waarbij door de term informatiemodel te hanteren wordt aangegeven dat het een abstractie (het model) vormt van de werkelijkheid zoals beschreven binnen een bepaalde sector/domein. Informatiemodellen zijn een semantische invulling van normen voor sectoren zoals ruimtelijke ordening, kabels en leidingen, water, etc.. PR, Praktijkrichtlijn : Praktijkrichtlijnen zijn producten die informatie geven, vaak met een technisch karakter, die nodig is voor het toepassen van standaarden. Een praktijkrichtlijn hoort altijd bij een standaard/norm. HR, Handreiking : Op zichzelf staande documentatie dat als doel heeft een hulpmiddel te zijn, niet verplichtend maar ondersteunend. WA, Werkafspraak : Legt uit hoe wetgeving moet worden toegepast bij onduidelijkheden, discrepanties of fouten in de standaarden. BD, Beheerdocument atie : Documentatie met betrekking tot het beheerproces van de standaard. Deze documentatie betreft niet een standaard of onderdeel daarvan, zoals een handreiking of werkafspraak. AL, Algemeen : Op zichzelf staande algemene documentatie over standaarden. De documentatie betreft niet een specifieke standaard of onderdeel daarvan, het is ook geen beheerdocumentatie van een specifieke standaard. LocalBiblio In de localBiblio variabele worden Referenties naar andere documenten gezet. Voordat je hier citaten toevoegt, loont het de moeite om eerst in de SpecRef van ReSpec zelf te kijken. Zie voor uitleg van Specref paragraaf 4.3.3 . Pas als je een verwijzing niet vindt in SpecRef voeg je hem hier toe! Het bestand \u201cstyle.css\u201d TODO:FIXME Het bestand style.css staat in de map media. De Geonovum Fork van ReSpec heeft een eigen styling. Met het bestand style.css kan je de default styling van Geonovum overschrijven en/of aanvullen. Om te voorkomen dat er een wildgroei aan stijlen, lettertypes en kleuren gaat ontstaan, moet die altijd in overleg met de ReSpec Beheerders (zie Hoofdstuk 5 ). Content: bestanden \u201c*.md\u201d De \u201cechte\u201d content wordt gemaakt in het formaat \u201cMarkdown\u201d. Er is een aantal editors beschikbaar die dat formaat ondersteunen. Zie hiervoor Hoofdstuk 3 . Het is handig om voor elk hoofdstuk een aparte Markdown file te maken, want dan blijven de bestanden beperkt in grootte, en zijn er gemakkelijker werkafspraken te maken over wie wanneer in welke file aan het editen is. Content: Afbeeldingen \u201c*.png\u201d Afbeeldingen worden als \u201cpng\u201d bestand neergezet in de map \u201cmedia\u201d. In je Markdown document neem je gewoon een plaatje op zoals je in Word gewend bent. Writage en ReSpec zorgen ervoor dat de plaatjes worden getoond. ReSpec Frontend De knop \u201cReSpec\u201d De knop \u201cReSpec\u201d rechtsboven in de frontend van ReSpec, bevat een aantal handige functies. Als je klikt op de knop, verschijnt het vervolgscherm met een viertal functies. Elk van de functies wordt hieronder uitgelegd. Bewaar snapshot Doorzoek SpecRef De gevonden zoekresultaten kunnen worden overgenomen in het ReSpec document. Lijst van definities Deze functie gebruiken wij vooralsnog niet. Hogere ReSpec Omdat wij ervoor hebben gekozen om documenten te schrijven in Markdown, gebruiken wij niet alle ReSpec functionaliteit. In dit hoofdstuk worden de speciale ReSpec functies beschreven die als HTML code in het Markdown document kunnen wordnen opgenomen, of die in de door respec gegenereerde HTML file kunnen worden neergezet. Het gebruik van deze functionaliteit vereist dus wel HTML voorkennis. Afbeeldingen Een lijst van afbeeldingen kan door ReSpec automatisch worden gegenereerd, maar dan moet er wel aan een aantal ReSpec specifieke voorwaarden worden voldaan: In Index.html komt ergens te staan: <figure id=\"flowchart\"> <img src=\"flowchart.svg\" alt=\"\"> <figcaption>The water flows from bucket A to bucket B.</figcaption> </figure> In de documenten worden de afbeeldingen op de volgende manier neergezet: <figure id=\"flowchart\"> <img src=\"flowchart.svg\" alt=\"\"> <figcaption>The water flows from bucket A to bucket B.</figcaption> </figure> NB: \\<figure> inclusief uniek ID en een ge-embedde \\<figcaption> zijn verplicht! Eventuele referenties naar plaatjes doe je op e volgende manier: <p>The flowchart shown in <a href=\"#flowchart\"></a> is quite impressive.</p> </section> Referentie naar GitHub issues ReSpec ondersteunt ook een koppeling naar issues die zijn gemeld op GitHub. Jek kan referenties opnemen naar individuele issues. Ook is het mogelijk om een lijst met alle issues op te nemen in je document. Om GitHub issues op te nemen moet je in \u201cconfig.js\u201d een referentie opnemen naar de GitHub repository. <span style='color: #24292E;'github <span style='color: #D73A49;': <span style='color: #032F62;'\" <span style='color: #032F62;'https://www.github.com/Geonovum/MIM-Werkomgeving/ <span style='color: #032F62;'\" <span style='color: #24292E;', Een referentie naar een issue neem je als volgt op: <div class=\"issue\" data-number=\"363\"></div> Waarbij data-number het issuenummer is. Een lijst met issues kan je toevoegen met de volgende HTML code: <section class=\"appendix\" id=\"issue-summary\"> <!-- Issues will magically be listed here! --> </section> Foutmeldingen en waarschuwingen In dit geval is er een tikfout gemaakt bij de naam van de Markdownfile die ge-include wordt. Het moet natuurlijk \u201cH2-Testcases.md\u201d zijn. Een voorbeeld van een waarschuwing. Klikken hierop geeft je je de waarschuwing. In het onderstaande voorbeeld meldt ReSpec dat er een \\<h2> header ontbreekt in het Markdown document.","title":"Manual"},{"location":"ReSpec/#respec","text":"ReSpec is een tool van W3C die het schrijven van specifications makkelijker maakt. ReSpec zorgt voor een uniforme styling in het document, onderhoudt referenties en verwijzingen naar andere documentatie, verzorgt de inhoudsopgave, zorgt voor links naar vorige en meest recente versies, en heeft een integratie met Github issues.","title":"ReSpec"},{"location":"ReSpec/#algemeen","text":"Er is een gedetailleerde (Engelstalige) gebruikershandleiding beschikbaar [2] Zie: https://github.com/w3c/respec/wiki/ReSpec-Editor's-Guide , en er is ook een ontwikkelaarshandleiding [3] Zie: https://github.com/w3c/respec/wiki/Developers-Guide te vinden. Geonovum heeft een fork van W3C ReSpec omdat wij sommige onderdelen gecustomised hebben. Deze eigen versie van ReSpec wordt beheerd door de technisch beheerders van ReSpec, en dat valt buiten dit document. De Geonovum wiki over ReSpec kan naast dit hoofdstuk worden gebruikt: https://github.com/Geonovum/respec/wiki","title":"Algemeen"},{"location":"ReSpec/#documentatie-maken-met-respec","text":"","title":"Documentatie maken met ReSpec"},{"location":"ReSpec/#de-map-indeling","text":"Een document dat bij Geonovum met ReSpec wordt gemaakt heeft standaard de onderstaande mappenstructuur. Voor het aanmaken van een nieuw ReSpec Document staat een template klaar. Hoofdmap Naam van de hoofdmap media Map met de vaste naam \u201cmedia\u201d Style.css File met vaste naam, bevat de styling van het document *.png Afbeeldingsbestanden index.html File met de vaste naam \u201cIndex.html\u201d config.js File met de vaste naam \u201cconfig.js\u201d *.md Tekstbestanden (Markdown) die de content bevatten Hieronder een voorbeeld van zo\u2019n mappenstructuur. De .workspace file is een file die is aangemaakt door de \u201cVisual Studio Code\u201d Editor, daarover later meer. In de hoofdmap staan de submap \u201cmedia en de files \u201cindex.html, \u201cconfig.js en *.md (Markdown) files. In de submap \u201cmedia\u201d staat o.a. het bestand \u201cstyle.css\u201d, en ook worden alle afbeeldingen uit het Markdown door de Markdown plugin voor word in de map media gezet. De namen van de afbeeldingen in dit voorbeeld zijn geregenereerd door de Markdown plugin \u201cWritage\u201d (zie paragraaf 3.2 ) Het staat je vrij om die namen herkenbare namen te geven, zolang je deze namen dan ook maar in de verwijzingen worden gebruikt.","title":"De map indeling"},{"location":"ReSpec/#het-bestand-indexhtml","text":"Het bestand index.html zorgt ervoor dat het ReSpec document automatisch wordt geladen in de browser. Bij het laden wordt ook automatisch de geonovum-ReSpec-code geladen en uitgevoerd. Deze code zorgt ervoor dat het document zijn standaard layout krijgt. Index.html heeft een standaard indeling. Hieronder de template zoals gebruikt voorbeeld: <!DOCTYPE html> <html lang=\"nl\"> <head> <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <script src=\"https://cdn.jsdelivr.net/gh/digitalbazaar/respec-mermaid@1.0.1/dist/main.js\" class=\"remove\"></script> <script src=\"https://tools.geostandaarden.nl/respec/config/geonovum-config.js\" class=\"remove\"></script> <script src=\"js/config.js\" class=\"remove\"></script> <script class=\"remove\"> respecConfig = {...organisationConfig, ...respecConfig}</script> <script>document.title = respecConfig.title</script> <title>Default</title> <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"https://tools.geostandaarden.nl/respec/style/logos/Geonovum.ico\" /> <script src=\"https://gitdocumentatie.logius.nl/publicatie/respec/builds/respec-nlgov.js\" class=\"remove\" async></script> </head> <body> <section id=\"abstract\" data-include-format=\"markdown\" data-include=\"abstract.md\"></section> <section id=\"sotd\"></section><!-- Wordt automatisch gevuld --> <!-- voeg hier je eigen hoofdstukken toe --> <section data-include-format=\"markdown\" data-include=\"ch01.md\" class=\"informative\"></section> <section data-include-format=\"markdown\" data-include=\"ch02.md\"></section> <section data-include-format=\"markdown\" data-include=\"mermaid.md\"></section> <section id='conformance'></section> <section id='tof'></section> <section id=\"index\"></section> </body> </html> In de HTML-header wordt de js-ReSpec bibliotheek geladen. Het enige dat in de header mag worden aangepast is de title (tussen \\<title> en \\</title>. Andere aanpassingen die nodig zijn in de header mogen alleen worden gedaan in overleg met de ReSpec beheerders. Een overzicht van de ReSpec beheerders staat in Hoofdstuk 6 In de HTML-Body geldt \u201cvrijheid in gebondenheid\u201d De \\<div> en/of \\<section> regels mogen worden gekopieerd en toegevoegd. Wel belangrijk om de structuur over te nemen, dus als volgt: \\<div id='H00' data-format=\"Markdown\" data-include=\"ToCoVo.md\">\\</div> \\<section id='H01' data-format=\"Markdown\" data-include=\"H1-Inleiding.md\">\\<h2>Inleiding\\</h2>\\</section> Een \\<div> is een sectie plus bijbehorend document, dat niet in de inhoudsopgave terechtkomt. Deze gebruik je bijvoorbeeld voor een Toelichting, een Colofon of een Voorwoord. Een \\<section> komt w\u00e9l in de inhoudsopgave terecht. Deze heeft daarom behalve de data-include van het document, ook (verplicht!) een \\<h2> tag. De tekst tussen \\<h2> en \\</h2> komt in de inhoudsopgave te staan.","title":"Het bestand \u201cindex.html\u201d"},{"location":"ReSpec/#het-bestand-configjs","text":"In config.js wordt een stuurvariabele voor ReSpec gevuld. De waarden in deze variabele worden door ReSpec gebruikt om de layout te bepalen, en bevatten een aantal document-eigenschappen. Hieronder een voorbeeld config.js. let respecConfig = { useLogo: true, useLabel: true, // title is verplicht! Neem hier de titel van het document op ---------------------- title: \"[Neem titel op in config.js]\", //-- specStatus is verplicht! (activeer 1 van de volgende) -------------------------- specStatus: \"wv\", // Werkversie //specStatus: \"cv\", // Consultatieversie //specStatus: \"vv\", // Versie ter vaststelling //specStatus: \"def\", // Vastgestelde versie //specStatus: \"basis\", // Basis Document //-- specType is verplicht bij alle andere dan BASIS --------------------------------- //specType: \"NO\", // Norm //specType: \"ST\", // Standaard //specType: \"IM\", // Informatie Model //specType: \"PR\", // Praktijkrichtlijn specType: \"HR\", // HandReiking //specType: \"WA\", // Werkafspraak //specType: \"BD\", // Beheer Documentatie //specType: \"AL\", // Algemeen document //specType: \"BP\", // Best Practice specType: \"HR\", //-- pubDomain is verplicht! (komt in de URL) ------------------------------------- pubDomain: \"dk\", //-- license: voor de geldende gebruiksvoorwaarden. Default is cc-by. //licence: \"cc-by-nd\", // bronvermelding, geen afgeleide werken (default) //licence: \"cc0\", // Public Domain Dedication licence: \"cc-by\", // Attribution, met bronvermelding //-- shortName is verplicht! (komt in de URL: kies logische afkorting)-------------- shortName: \"NL-ReSpec-GN-template\", //-- publishDate is verplicht ------------------------------------------------------- //-- NB: in de werkversie uitzetten, want dan pakt Respec de pushdate --------------- //publishDate: \"2023-03-28\", //eventueel is het mogelijk een versienummer mee te geven, maar bij Geonovum werken we gewoonlijk alleen met datum als onderdeel van de permanente URI. //publishVersion: \"0.0.2\", //previousVersion: \"0.0.1\", //-- Voor dit blok geldt: alleen als er eerdere versies zijn en altijd beiden aan/uit! //previousPublishDate: \"2014-05-01\", //previousMaturity: \"CV\", //-- de namen van de Editor(s) / Redacteur(en)--------------------------------------- //-- vul in: per Editor: name:, company:, companyURL: ------------------------------- editors: [ { name: \"voornaam achternaam\", company: \"Geonovum\", companyURL: \"https://www.geonovum.nl\", } ], //-- de namen van de auteur(s) ------------------------------------------------------ //-- vul in: per auteur: name:, company:, companyURL: ------------------------------- authors: [ { name: \"voornaam achternaam\", company: \"Geonovum\", companyURL: \"https://www.geonovum.nl\", } ], //neem hier de URL van de github repository op waar het respec document in staat github: \"https://github.com/Geonovum/NL-ReSpec-GN-template\", // Create PDF and link to file in header (optional): alternateFormats: [ { label: \"pdf\", uri: \"template.pdf\", }, ], }; De file config.js is eigenlijk een stukje javascript (JSON) code, het bevat alle mogelijke waarden voor de verschillende versies die wij hanteren bij Geonovum. In de file zelf staat aangegeven welke waarden verplicht zijn, en uit welke waarden te kiezen is. In bovenstaand voorbeeld gaat het om een \u201cWerkversie van een standaard\u201d. SpecStatus De SpecStatus in de configuratie geeft de keuze uit 4 waarden, deze waarden zijn vastgesteld, en mogen niet zomaar uitgebreid of aangepast worden. Elke status hoort bij een formele fase van een ReSpec document. Zie ook de Geonovum ReSpec wiki [4] Zie https://github.com/Geonovum/respec/wiki . GN-WV, Werkversie : Dit is de versie van het document waaraan wordt gewerkt. Deze versie is continu \u201cunder-construction\u201d. GN-CV, Consultatieversie : Dit is een \u201csnapshot\u201d van de versie die \u201cin consultatie\u201d wordt gezet. Aan deze versie wordt niks meer gedaan totdat de consultatie is afgelopen. Daarna worden alle op en aanmerkingen uit de consultatieronde verwerkt. GN-VV, Vaststellingsversie : Dit is een \u201csnapshot\u201d van de versie na het verwerken van de op en aanmerkingen uit de consultatieronde is ontstaan. Deze versie wordt aangeboden aan de programma-raad van Geonovum, om te wordern \u201cvastgesteld\u201d. GN-DEF, Definitieve versie : Dit is de definitieve versie van het document, zoals vastgesteld door de programma-raad. Van deze versie wordt opnieuw een \u201csnapshot\u201d gemaakt in ReSpec. Het resultaat van die snapshot wordt op http://docs.geonovum.nl neergezet. SpecType Het SpecType in de configuratie is een vaste lijst met waarden, deze waarden zijn vastgesteld, en mogen niet zonder overleg met de Technische ReSpec beheerders uitgebreid of aangepast worden. Onderstaande beschrijvingen komen uit het generiek beheerplan [5] Zie: https://www.geonovum.nl/uploads/documents/Geonovum%20GENERIEK%20Beheerplan%20geo-standaarden%20v1.1.pdf . NO, Norm : Een norm is bij een officieel standaardisatie instituut ondergebracht en bevat bindende afspraken. Naast het gebruik van normen is NEN 3610 de enige norm waar Geonovum een inhoudelijke verantwoordelijkheid heeft. Het formele beheer en beslissingen worden genomen in de NEN normcommissie 351 240 waar Geonovum de voorzitter van is. ST, Standaard : Een document met (bindende) afspraken. IM, Informatiemodel : Een standaard waarbij door de term informatiemodel te hanteren wordt aangegeven dat het een abstractie (het model) vormt van de werkelijkheid zoals beschreven binnen een bepaalde sector/domein. Informatiemodellen zijn een semantische invulling van normen voor sectoren zoals ruimtelijke ordening, kabels en leidingen, water, etc.. PR, Praktijkrichtlijn : Praktijkrichtlijnen zijn producten die informatie geven, vaak met een technisch karakter, die nodig is voor het toepassen van standaarden. Een praktijkrichtlijn hoort altijd bij een standaard/norm. HR, Handreiking : Op zichzelf staande documentatie dat als doel heeft een hulpmiddel te zijn, niet verplichtend maar ondersteunend. WA, Werkafspraak : Legt uit hoe wetgeving moet worden toegepast bij onduidelijkheden, discrepanties of fouten in de standaarden. BD, Beheerdocument atie : Documentatie met betrekking tot het beheerproces van de standaard. Deze documentatie betreft niet een standaard of onderdeel daarvan, zoals een handreiking of werkafspraak. AL, Algemeen : Op zichzelf staande algemene documentatie over standaarden. De documentatie betreft niet een specifieke standaard of onderdeel daarvan, het is ook geen beheerdocumentatie van een specifieke standaard. LocalBiblio In de localBiblio variabele worden Referenties naar andere documenten gezet. Voordat je hier citaten toevoegt, loont het de moeite om eerst in de SpecRef van ReSpec zelf te kijken. Zie voor uitleg van Specref paragraaf 4.3.3 . Pas als je een verwijzing niet vindt in SpecRef voeg je hem hier toe!","title":"Het bestand \u201cconfig.js\u201d"},{"location":"ReSpec/#het-bestand-stylecss","text":"TODO:FIXME Het bestand style.css staat in de map media. De Geonovum Fork van ReSpec heeft een eigen styling. Met het bestand style.css kan je de default styling van Geonovum overschrijven en/of aanvullen. Om te voorkomen dat er een wildgroei aan stijlen, lettertypes en kleuren gaat ontstaan, moet die altijd in overleg met de ReSpec Beheerders (zie Hoofdstuk 5 ).","title":"Het bestand \u201cstyle.css\u201d"},{"location":"ReSpec/#content-bestanden-md","text":"De \u201cechte\u201d content wordt gemaakt in het formaat \u201cMarkdown\u201d. Er is een aantal editors beschikbaar die dat formaat ondersteunen. Zie hiervoor Hoofdstuk 3 . Het is handig om voor elk hoofdstuk een aparte Markdown file te maken, want dan blijven de bestanden beperkt in grootte, en zijn er gemakkelijker werkafspraken te maken over wie wanneer in welke file aan het editen is.","title":"Content: bestanden \u201c*.md\u201d"},{"location":"ReSpec/#content-afbeeldingen-png","text":"Afbeeldingen worden als \u201cpng\u201d bestand neergezet in de map \u201cmedia\u201d. In je Markdown document neem je gewoon een plaatje op zoals je in Word gewend bent. Writage en ReSpec zorgen ervoor dat de plaatjes worden getoond.","title":"Content: Afbeeldingen \u201c*.png\u201d"},{"location":"ReSpec/#respec-frontend","text":"","title":"ReSpec Frontend"},{"location":"ReSpec/#de-knop-respec","text":"De knop \u201cReSpec\u201d rechtsboven in de frontend van ReSpec, bevat een aantal handige functies. Als je klikt op de knop, verschijnt het vervolgscherm met een viertal functies. Elk van de functies wordt hieronder uitgelegd.","title":"De knop \u201cReSpec\u201d"},{"location":"ReSpec/#bewaar-snapshot","text":"","title":"Bewaar snapshot"},{"location":"ReSpec/#doorzoek-specref","text":"De gevonden zoekresultaten kunnen worden overgenomen in het ReSpec document.","title":"Doorzoek SpecRef"},{"location":"ReSpec/#lijst-van-definities","text":"Deze functie gebruiken wij vooralsnog niet.","title":"Lijst van definities"},{"location":"ReSpec/#hogere-respec","text":"Omdat wij ervoor hebben gekozen om documenten te schrijven in Markdown, gebruiken wij niet alle ReSpec functionaliteit. In dit hoofdstuk worden de speciale ReSpec functies beschreven die als HTML code in het Markdown document kunnen wordnen opgenomen, of die in de door respec gegenereerde HTML file kunnen worden neergezet. Het gebruik van deze functionaliteit vereist dus wel HTML voorkennis.","title":"Hogere ReSpec"},{"location":"ReSpec/#afbeeldingen","text":"Een lijst van afbeeldingen kan door ReSpec automatisch worden gegenereerd, maar dan moet er wel aan een aantal ReSpec specifieke voorwaarden worden voldaan: In Index.html komt ergens te staan: <figure id=\"flowchart\"> <img src=\"flowchart.svg\" alt=\"\"> <figcaption>The water flows from bucket A to bucket B.</figcaption> </figure> In de documenten worden de afbeeldingen op de volgende manier neergezet: <figure id=\"flowchart\"> <img src=\"flowchart.svg\" alt=\"\"> <figcaption>The water flows from bucket A to bucket B.</figcaption> </figure> NB: \\<figure> inclusief uniek ID en een ge-embedde \\<figcaption> zijn verplicht! Eventuele referenties naar plaatjes doe je op e volgende manier: <p>The flowchart shown in <a href=\"#flowchart\"></a> is quite impressive.</p> </section>","title":"Afbeeldingen"},{"location":"ReSpec/#referentie-naar-github-issues","text":"ReSpec ondersteunt ook een koppeling naar issues die zijn gemeld op GitHub. Jek kan referenties opnemen naar individuele issues. Ook is het mogelijk om een lijst met alle issues op te nemen in je document. Om GitHub issues op te nemen moet je in \u201cconfig.js\u201d een referentie opnemen naar de GitHub repository. <span style='color: #24292E;'github <span style='color: #D73A49;': <span style='color: #032F62;'\" <span style='color: #032F62;'https://www.github.com/Geonovum/MIM-Werkomgeving/ <span style='color: #032F62;'\" <span style='color: #24292E;', Een referentie naar een issue neem je als volgt op: <div class=\"issue\" data-number=\"363\"></div> Waarbij data-number het issuenummer is. Een lijst met issues kan je toevoegen met de volgende HTML code: <section class=\"appendix\" id=\"issue-summary\"> <!-- Issues will magically be listed here! --> </section>","title":"Referentie naar GitHub issues"},{"location":"ReSpec/#foutmeldingen-en-waarschuwingen","text":"In dit geval is er een tikfout gemaakt bij de naam van de Markdownfile die ge-include wordt. Het moet natuurlijk \u201cH2-Testcases.md\u201d zijn. Een voorbeeld van een waarschuwing. Klikken hierop geeft je je de waarschuwing. In het onderstaande voorbeeld meldt ReSpec dat er een \\<h2> header ontbreekt in het Markdown document.","title":"Foutmeldingen en waarschuwingen"},{"location":"Subversion/","text":"Subversion Subversion is een versiebeheersysteem vergelijkbaar met GitHub. Echter binnen de UML modelleertool Enterprise Architect kun je GitHub niet gebruiken dus gebruiken we daar Subversion. Installeren van Subversion in Enterprise Architect Wanneer een UML model in subversion beheerd is dan kun je deze als volgt op je eigen computer gebruiken. - Installeer een SVN client tool waar een command line verise bij zit - Installeer sliksvn - Vroeger was het advies om tortoiseSVN te installeren (https://tortoisesvn.net). Deze bevat geen command line variant meer maar nog wel een mooie GUI die in de instructies hieronder gebruikt wordt. - Zorg voor een Geonovum svn account. Dit kun je aanvragen bij Wilko Quak of als hij niet beschikbaar is rechtstreeks bij Rob Kaesehagen die de server beheert. - Voor projectX die gebruik maakt van de subversion map svn.geostandaarden.nl/ProjectX: - Maak een folder op je lokale systeem: WerkmapProjectX - Maak een subfolder svn. - Maak een nieuw EA project ProjectX.eapx in je werkmap. - Klik met je rechtermuistoets op deze folder en kies SVN Checkout - Er verschijnt een Checkout dialoog. Vul als URL in svn://svn.geostandaarden.nl/IMGeluid en als output directory de folder die je net hebt aangemaakt. Kies de settings zoals hieronder weergegeven: Configureer version control in EA Kies uit het menu (de ribbon bovenin EA) Configure > Settings. Het Version Control Settings dialoogvenster verschijnt. Vul dit zoals hieronder in en klik dan op Save. Breng nu elk van de packages, op het niveau waarop je ze wilt kunnen in- en uitchecken, onder versiebeheer. Selecteer het tabblad Configure (bovenin) en klik op Package Configuration) Vul het Package Control Options dialoog in zoals hieronder (XMI Filename kan anders zijn, afhankelijk van hoe de packages zijn ingedeeld) en klik OK. Selecteer bij Version Control het voorgestelde path Kies \u2018Include sub-packages\u2019 als je wilt dat alle sub-packages in hetzelfde XMI bestand beheerd worden en dus geen eigen slotje krijgen. Elk van de packages die in SVN zijn ondergebracht, hebben nu in EA een slotje. Je kunt de inhoud van het model dat in zo'n package staat niet zomaar meer wijzigen. Om aan een package te werken, check je het eerst uit. Klik met de rechtermuistoets op het package, kies Package Control > Check Out\u2026 (gebruik NIET \"check out branch\", dat is om met parallelle versies te werken, doen wij niet). Subversion haalt nu de laatste versie van het package voor je op en haalt het slotje voor je eraf. Een ander persoon kan niet tegelijkertijd aan dit package werken, maar het wel bekijken. Als je klaar bent met je werk, of je stopt er voor vandaag mee, check je het package weer in. Klik met de rechtermuistoets op het package, kies Package Control > Check In\u2026 (gebruik NIET \"check in branch\", dat is om met parallelle versies te werken, doen wij niet). Andere handige commando's: Put Latest > Tussentijds wijzigingen naar de SVN server sturen Get Latest > Laatste wijzigingen van de SVN server ophalen zodat je ze kan zien, zonder te willen uitchecken.","title":"SVN"},{"location":"Subversion/#subversion","text":"Subversion is een versiebeheersysteem vergelijkbaar met GitHub. Echter binnen de UML modelleertool Enterprise Architect kun je GitHub niet gebruiken dus gebruiken we daar Subversion.","title":"Subversion"},{"location":"Subversion/#installeren-van-subversion-in-enterprise-architect","text":"Wanneer een UML model in subversion beheerd is dan kun je deze als volgt op je eigen computer gebruiken. - Installeer een SVN client tool waar een command line verise bij zit - Installeer sliksvn - Vroeger was het advies om tortoiseSVN te installeren (https://tortoisesvn.net). Deze bevat geen command line variant meer maar nog wel een mooie GUI die in de instructies hieronder gebruikt wordt. - Zorg voor een Geonovum svn account. Dit kun je aanvragen bij Wilko Quak of als hij niet beschikbaar is rechtstreeks bij Rob Kaesehagen die de server beheert. - Voor projectX die gebruik maakt van de subversion map svn.geostandaarden.nl/ProjectX: - Maak een folder op je lokale systeem: WerkmapProjectX - Maak een subfolder svn. - Maak een nieuw EA project ProjectX.eapx in je werkmap. - Klik met je rechtermuistoets op deze folder en kies SVN Checkout - Er verschijnt een Checkout dialoog. Vul als URL in svn://svn.geostandaarden.nl/IMGeluid en als output directory de folder die je net hebt aangemaakt. Kies de settings zoals hieronder weergegeven: Configureer version control in EA Kies uit het menu (de ribbon bovenin EA) Configure > Settings. Het Version Control Settings dialoogvenster verschijnt. Vul dit zoals hieronder in en klik dan op Save. Breng nu elk van de packages, op het niveau waarop je ze wilt kunnen in- en uitchecken, onder versiebeheer. Selecteer het tabblad Configure (bovenin) en klik op Package Configuration) Vul het Package Control Options dialoog in zoals hieronder (XMI Filename kan anders zijn, afhankelijk van hoe de packages zijn ingedeeld) en klik OK. Selecteer bij Version Control het voorgestelde path Kies \u2018Include sub-packages\u2019 als je wilt dat alle sub-packages in hetzelfde XMI bestand beheerd worden en dus geen eigen slotje krijgen. Elk van de packages die in SVN zijn ondergebracht, hebben nu in EA een slotje. Je kunt de inhoud van het model dat in zo'n package staat niet zomaar meer wijzigen. Om aan een package te werken, check je het eerst uit. Klik met de rechtermuistoets op het package, kies Package Control > Check Out\u2026 (gebruik NIET \"check out branch\", dat is om met parallelle versies te werken, doen wij niet). Subversion haalt nu de laatste versie van het package voor je op en haalt het slotje voor je eraf. Een ander persoon kan niet tegelijkertijd aan dit package werken, maar het wel bekijken. Als je klaar bent met je werk, of je stopt er voor vandaag mee, check je het package weer in. Klik met de rechtermuistoets op het package, kies Package Control > Check In\u2026 (gebruik NIET \"check in branch\", dat is om met parallelle versies te werken, doen wij niet). Andere handige commando's: Put Latest > Tussentijds wijzigingen naar de SVN server sturen Get Latest > Laatste wijzigingen van de SVN server ophalen zodat je ze kan zien, zonder te willen uitchecken.","title":"Installeren van Subversion in Enterprise Architect"},{"location":"abstract/","text":"Dit document beschrijft hoe binnen Geonovum emt GitHub, Mardown en ReSpec documenten worden beheerd.","title":"Abstract"}]}